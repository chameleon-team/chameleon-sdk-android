<template>
  <view class="cml-btn" c-bind:click="onclick" style="{{mrBtnStyle}}">
    <text class="btn-text" style="{{mrTextStyle}}">{{text}}</text>
  </view>
</template>
<script>
import {
  STYLE_MAP,
  TEXT_STYLE_MAP,
  BUTTON_STYLE_MAP,
  TEXT_FONTSIZE_STYLE_MAP
} from "./type";

function str2obj(str) {
  let styleArr = str.split(';');
  let style = {}
  styleArr.forEach(item => {
    let si = item.split(':');
    if (si.length === 2) {
      style[si[0]] = si[1];
    }    
  })
  return style;
  // return String.keys(obj)
  //   .map(key => `${key}:${obj[key]}`)
  //   .join(";");
}

function obj2str(obj) {
  return Object.keys(obj)
      .map(key => `${key}:${obj[key]}`)
      .join(";");
}

 class Button implements ButtonInterface {
    props = {
      text: {
        type: String,
        default: "确认"
      },
      size: {
        type: String,
        default: "none"
      },
      type: {
        type: String,
        default: "blue"
      },
      disabled: {
        type: Boolean,
        default: false
      },
      btnStyle: {
        type: String,
        default: ""
      },
      textStyle: {
        type: String,
        default: ""
      },
      disabledStyle: {
        type: String,
        default: ""
      },
      openType: {
        type: String,
        default: ""
      },
      lang: {
        type: String,
        default: "en"
      },
      sessionFrom: {
        type: String,
        default: ""
      },
      sendMessageTitle: {
        type: String,
        default: "当前标题"
      },
      sendMessagePath: {
        type: String,
        default: "当前分享路径"
      },
      sendMessageImg: {
        type: String,
        default: "截图"
      },
      showMessageCard: {
        type: Boolean,
        default: false
      },
      appParameter: {
        type: String,
        default: ""
      }
    }
    computed ={
      mrBtnStyle() {
        const { type, disabled, btnStyle, size, disabledStyle } = this;
        const mrBtnStyle = {
          ...STYLE_MAP[type],
          ...str2obj(btnStyle),
          ...BUTTON_STYLE_MAP[size]
        };

        let disabledInStyle = { opacity: 0.2 };
        if (type === "white") {
          disabledInStyle = { "background-color": "rgba(0, 0, 0, 0.1)" };
        }

        let afterStyle = disabled
          ? {
              ...mrBtnStyle,
              ...disabledInStyle,
              ...str2obj(disabledStyle),
              "border-width": 0
            }
          : mrBtnStyle;

        return obj2str(afterStyle);
      },
      mrTextStyle() {
        const { type, disabled, textStyle, size } = this;
        const mrTextStyle = {
          ...TEXT_STYLE_MAP[type],
          ...str2obj(textStyle),
          ...TEXT_FONTSIZE_STYLE_MAP[size]
        };
        let afterStyle = disabled
          ? { ...mrTextStyle, color: "#FFFFFF" }
          : mrTextStyle;

        return obj2str(afterStyle);
      }
    }
    methods = {
      onclick(e) {
        const { type, disabled } = this
        this.$cmlEmit('onclick', {
          type,
          disabled
        });
      }
    }
    
  }
  export default new Button();
</script>

<style scoped>
@import "../../assets/css/var.less";
.cml-btn {
  display: flex;
  width: 702cpx;
  height: 88cpx;
  background: @color-regular-blue;
  border: none;
  align-items: center;
  justify-content: center;
  border-radius: 4cpx;
}
.cml-btn:active {
  opacity: 0.9;
}
.btn-text {
  text-align: center;
  vertical-align: middle;
  text-overflow: ellipsis;
  white-space: nowrap;
  outline: none;
  lines: 1;
  font-size: 36cpx;
  font-weight: 500;
  color: #ffffff;
}
</style>
<script cml-type="json">
{
  "web": {
    "component": true
  }
}
</script>




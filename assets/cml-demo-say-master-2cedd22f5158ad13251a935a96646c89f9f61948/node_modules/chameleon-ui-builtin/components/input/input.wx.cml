<template>
  <input
      value="{{inputValue}}"
      type="{{type}}"
      placeholder="{{placeholder}}"
      disabled="{{disabled}}"
      maxlength="{{maxlength}}"
      style="{{wxStyle}}"

      c-bind:input="inputEvent"
      c-bind:blur="blurEvent"
      c-bind:focus="focusEvent"
      c-bind:confirm="confirmEvent"

      focus="{{focus}}"
      confirm-type="{{returnKeyType}}"
      placeholder-style="{{wxPlaceHolderStyle}}"
  />
</template>
<script>
import {getValBetweenMaxAndMin} from '../../assets/js/utils/utils';
 class Input implements InputInterface {
    props = {
      value: {
        type: String,
        default: ''
      },
      //input的类型
      type: {
        type: String,
        default: 'text'  //枚举值 text number password
      },
      //input的placerholder
      placeholder: {
        type: String,
        default: ''
      },
      //是否禁用input输入
      disabled: {
        type: Boolean,
        default: false
      },
      //控制input是否聚焦
      focus: {
        type: Boolean,
        default: false
      },
      //最大长度
      maxlength: {
        type: Number,
        default: 140
      },
      //右下角返回键类型
      returnKeyType: { //枚举值 done search next go
        type: String,
        default: 'done'
      },
      placerHolderColor: {
        type: String,
        default: '#bebebe'
      },
      cStyle: {
        type: String,
        default: ''
      },
      maxValue: { //type=number 最大值
        type: Number,
        default: Infinity
      },
      minValue: { //type=number 最小值
        type: Number,
        default: -Infinity
      }
    }
    data = {
      inputValue: "",
      defaultStyle: "font-size: 33cpx; height: 80cpx; line-height: 80cpx; padding-left:20cpx; padding-right:20cpx; color: #000; border: 1px solid #999;border-radius: 8cpx; text-align: left; background-color: #fff;"
    }
    computed ={
      wxPlaceHolderStyle() {
        return `color: ${this.placerHolderColor};`
      },
      wxStyle() {
        let style = this.defaultStyle + this.cStyle;
        return style
      },
      isInputNumber () {
        return this.type === 'number';
      }
    }
    watch = {
      focus: function(newVal, oldVal) {
      },
      value: function(newVal, oldVal) {
        this.inputValue = newVal;
      }
    }
    mounted() {
      this.inputValue = this.value;  
    }
    methods = {
      inputEvent(e) {
        let value = e.detail.value;
        if (this.isInputNumber) {
          value = getValBetweenMaxAndMin(value, this.maxValue, this.minValue);
        }
        this.$cmlEmit('input',{
          value: value || ''
        })
        this.$cmlEmit('inputevent',{
          value: value || ''
        })
      },
      blurEvent(e) {
        let value = e.detail.value;
        if (this.isInputNumber) {
          value = getValBetweenMaxAndMin(value, this.maxValue, this.minValue);
        }
        this.$cmlEmit('blurevent',{
          value: value
        });
        this.$cmlEmit('blur',{
          value: value
        });
      },
      focusEvent(e) {
        this.$cmlEmit('focusevent');
        this.$cmlEmit('focus');
      },
      confirmEvent(e) {
        this.$cmlEmit('confirmevent')
        this.$cmlEmit('confirm')
      }
    }
  }
  export default new Input();
</script>

<style scoped>

</style>

<script cml-type="json">
{
  "wx": {
    "component": true
  }
}
</script>
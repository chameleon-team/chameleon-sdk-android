<script cml-type="interface">
    // 定义模块的interface
    interface bootstrapInterface {
      bootstrap(options: CMLObject) : Undefined;
    }
</script>

<script cml-type="web">
  
  let router,routerConfig,app,store;

  import {validOptions} from './utils.js';

  /* istanbul ignore next */
  class Method implements bootstrapInterface {
    bootstrap(options = {}) {
      validOptions(options);

      options.createVM = options.createVM === false ? false : true;
      app = options.app;
      router = options.router;
      routerConfig = options.routerConfig;
      store = options.store;

      let vueOptions = {
        el: '#root',
        router,
        store,
        render: h => h(app)
      }
      
      if(options.createVM) {
        new Vue(vueOptions);
      }
    }

    getInfo() {
      return {
        router,
        routerConfig
      }
    }
  }
  export default new Method();
</script>

<script cml-type="weex">
  
  import {validOptions} from './utils.js';

  let router,routerConfig,app,store;
  /* istanbul ignore next */
  class Method implements bootstrapInterface {
    bootstrap(options) {
      /*global Vue*/
      validOptions(options);

      options.createVM = options.createVM === false ? false : true;
      app = options.app;
      router = options.router;
      routerConfig = options.routerConfig;
      store = options.store;

      let vueOptions = {el: '#root', router, store}

      if(options.createVM) {
        let bridge = require('chameleon-bridge').default;
        let cmlApi = require('chameleon-api').default;
        setTimeout(() => {
          let query = bridge.getQueryObjSync();
          let {path} = query;
          new Vue(Vue.util.extend(vueOptions, app));
          cmlApi.navigateTo({
            path
          });
        }, 50);
      }
    }
    getInfo() {
      
      return {
        router,
        routerConfig
      }
    }
  }
  export default new Method();
</script>

<script cml-type="wx">
    /* istanbul ignore next */
    class Method implements bootstrapInterface {
      bootstrap(options) {
        //  小程序端启动入口为src/app/app.cml
      }
    }

    export default new Method();
</script>
<script cml-type="alipay">
    /* istanbul ignore next */
    class Method implements bootstrapInterface {
      bootstrap(options) {
        //  小程序端启动入口为src/app/app.cml
      }
    }

    export default new Method();
</script>
<script cml-type="baidu">
    /* istanbul ignore next */
    class Method implements bootstrapInterface {
      bootstrap(options) {
        //  小程序端启动入口为src/app/app.cml
      }
    }

    export default new Method();
</script>

// { "framework": "Vue"}

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getTransferedObjectUUID = getTransferedObjectUUID;\nfunction getTransferedObjectUUID(name, id) {\n    return name.toLowerCase() + \"-\" + id;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvY2xhc3NVdGlscy5qcz9hZTRkIl0sIm5hbWVzIjpbImdldFRyYW5zZmVyZWRPYmplY3RVVUlEIiwibmFtZSIsImlkIiwidG9Mb3dlckNhc2UiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWdCQSx1QixHQUFBQSx1QjtBQUFULFNBQVNBLHVCQUFULENBQWlDQyxJQUFqQyxFQUF1Q0MsRUFBdkMsRUFBMkM7QUFDOUMsV0FBVUQsS0FBS0UsV0FBTCxFQUFWLFNBQWdDRCxFQUFoQztBQUNIIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmZXJlZE9iamVjdFVVSUQobmFtZSwgaWQpIHtcbiAgICByZXR1cm4gYCR7bmFtZS50b0xvd2VyQ2FzZSgpfS0ke2lkfWA7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9jb250ZXh0LXdlYmdsL2NsYXNzVXRpbHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _FillStylePattern = __webpack_require__(11);\n\nvar _FillStylePattern2 = _interopRequireDefault(_FillStylePattern);\n\nvar _FillStyleLinearGradient = __webpack_require__(12);\n\nvar _FillStyleLinearGradient2 = _interopRequireDefault(_FillStyleLinearGradient);\n\nvar _FillStyleRadialGradient = __webpack_require__(13);\n\nvar _FillStyleRadialGradient2 = _interopRequireDefault(_FillStyleRadialGradient);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CanvasRenderingContext2D = function () {\n\n    // _imageMap = new GHashMap();\n    // _textureMap = new GHashMap();\n\n    function CanvasRenderingContext2D() {\n        _classCallCheck(this, CanvasRenderingContext2D);\n\n        this._drawCommands = '';\n        this._globalAlpha = 1.0;\n        this._fillStyle = 'rgb(0,0,0)';\n        this._strokeStyle = 'rgb(0,0,0)';\n        this._lineWidth = 1;\n        this._lineCap = 'butt';\n        this._lineJoin = 'miter';\n        this._miterLimit = 10;\n        this._globalCompositeOperation = 'source-over';\n        this._textAlign = 'start';\n        this._textBaseline = 'alphabetic';\n        this._font = '10px sans-serif';\n        this._savedGlobalAlpha = [];\n        this.timer = null;\n        this.componentId = null;\n\n        this.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {\n            return new _FillStyleRadialGradient2.default(x0, y0, r0, x1, y1, r1);\n        };\n\n        this.quadraticCurveTo = function (cpx, cpy, x, y) {\n            this._drawCommands = this._drawCommands.concat(\"u\" + cpx + \",\" + cpy + \",\" + x + \",\" + y + \";\");\n        };\n\n        this.strokeText = function (text, x, y) {\n            var tmptext = text.replace(/!/g, \"!!\");\n            tmptext = tmptext.replace(/,/g, \"!,\");\n            tmptext = tmptext.replace(/;/g, \"!;\");\n            this._drawCommands = this._drawCommands.concat(\"U\" + tmptext + \",\" + x + \",\" + y + \",0.0;\");\n        };\n\n        this.measureText = function (text) {\n            throw new Error('GCanvas not supported yet');\n        };\n\n        this.isPointInPath = function (x, y) {\n            throw new Error('GCanvas not supported yet');\n        };\n\n        this.className = 'CanvasRenderingContext2D';\n    }\n\n    _createClass(CanvasRenderingContext2D, [{\n        key: 'setTransform',\n        value: function setTransform(a, b, c, d, tx, ty) {\n            this._drawCommands = this._drawCommands.concat(\"t\" + (a === 1 ? \"1\" : a.toFixed(2)) + \",\" + (b === 0 ? \"0\" : b.toFixed(2)) + \",\" + (c === 0 ? \"0\" : c.toFixed(2)) + \",\" + (d === 1 ? \"1\" : d.toFixed(2)) + \",\" + tx.toFixed(2) + \",\" + ty.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'transform',\n        value: function transform(a, b, c, d, tx, ty) {\n            this._drawCommands = this._drawCommands.concat(\"f\" + (a === 1 ? \"1\" : a.toFixed(2)) + \",\" + (b === 0 ? \"0\" : b.toFixed(2)) + \",\" + (c === 0 ? \"0\" : c.toFixed(2)) + \",\" + (d === 1 ? \"1\" : d.toFixed(2)) + \",\" + tx + \",\" + ty + \";\");\n        }\n    }, {\n        key: 'resetTransform',\n        value: function resetTransform() {\n            this._drawCommands = this._drawCommands.concat(\"m;\");\n        }\n    }, {\n        key: 'scale',\n        value: function scale(a, d) {\n            this._drawCommands = this._drawCommands.concat(\"k\" + a.toFixed(2) + \",\" + d.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'rotate',\n        value: function rotate(angle) {\n            this._drawCommands = this._drawCommands.concat(\"r\" + angle.toFixed(6) + \";\");\n        }\n    }, {\n        key: 'translate',\n        value: function translate(tx, ty) {\n            this._drawCommands = this._drawCommands.concat(\"l\" + tx.toFixed(2) + \",\" + ty.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'save',\n        value: function save() {\n            this._savedGlobalAlpha.push(this._globalAlpha);\n            this._drawCommands = this._drawCommands.concat(\"v;\");\n        }\n    }, {\n        key: 'restore',\n        value: function restore() {\n            this._drawCommands = this._drawCommands.concat(\"e;\");\n            this._globalAlpha = this._savedGlobalAlpha.pop();\n        }\n    }, {\n        key: 'createPattern',\n        value: function createPattern(img, pattern) {\n            return new _FillStylePattern2.default(img, pattern);\n        }\n    }, {\n        key: 'createLinearGradient',\n        value: function createLinearGradient(x0, y0, x1, y1) {\n            return new _FillStyleLinearGradient2.default(x0, y0, x1, y1);\n        }\n    }, {\n        key: 'strokeRect',\n        value: function strokeRect(x, y, w, h) {\n            this._drawCommands = this._drawCommands.concat(\"s\" + x + \",\" + y + \",\" + w + \",\" + h + \";\");\n        }\n    }, {\n        key: 'clearRect',\n        value: function clearRect(x, y, w, h) {\n            this._drawCommands = this._drawCommands.concat(\"c\" + x + \",\" + y + \",\" + w + \",\" + h + \";\");\n        }\n    }, {\n        key: 'clip',\n        value: function clip() {\n            this._drawCommands = this._drawCommands.concat(\"p;\");\n        }\n    }, {\n        key: 'resetClip',\n        value: function resetClip() {\n            this._drawCommands = this._drawCommands.concat(\"q;\");\n        }\n    }, {\n        key: 'closePath',\n        value: function closePath() {\n            this._drawCommands = this._drawCommands.concat(\"o;\");\n        }\n    }, {\n        key: 'moveTo',\n        value: function moveTo(x, y) {\n            this._drawCommands = this._drawCommands.concat(\"g\" + x.toFixed(2) + \",\" + y.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'lineTo',\n        value: function lineTo(x, y) {\n            this._drawCommands = this._drawCommands.concat(\"i\" + x.toFixed(2) + \",\" + y.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'bezierCurveTo',\n        value: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n            this._drawCommands = this._drawCommands.concat(\"z\" + cp1x.toFixed(2) + \",\" + cp1y.toFixed(2) + \",\" + cp2x.toFixed(2) + \",\" + cp2y.toFixed(2) + \",\" + x.toFixed(2) + \",\" + y.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'arcTo',\n        value: function arcTo(x1, y1, x2, y2, radius) {\n            this._drawCommands = this._drawCommands.concat(\"h\" + x1 + \",\" + y1 + \",\" + x2 + \",\" + y2 + \",\" + radius + \";\");\n        }\n    }, {\n        key: 'beginPath',\n        value: function beginPath() {\n            this._drawCommands = this._drawCommands.concat(\"b;\");\n        }\n    }, {\n        key: 'fillRect',\n        value: function fillRect(x, y, w, h) {\n            this._drawCommands = this._drawCommands.concat(\"n\" + x + \",\" + y + \",\" + w + \",\" + h + \";\");\n        }\n    }, {\n        key: 'rect',\n        value: function rect(x, y, w, h) {\n            this._drawCommands = this._drawCommands.concat(\"w\" + x + \",\" + y + \",\" + w + \",\" + h + \";\");\n        }\n    }, {\n        key: 'fill',\n        value: function fill() {\n            this._drawCommands = this._drawCommands.concat(\"L;\");\n        }\n    }, {\n        key: 'stroke',\n        value: function stroke(path) {\n            this._drawCommands = this._drawCommands.concat(\"x;\");\n        }\n    }, {\n        key: 'arc',\n        value: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n\n            var ianticlockwise = 0;\n            if (anticlockwise) {\n                ianticlockwise = 1;\n            }\n\n            this._drawCommands = this._drawCommands.concat(\"y\" + x.toFixed(2) + \",\" + y.toFixed(2) + \",\" + radius.toFixed(2) + \",\" + startAngle + \",\" + endAngle + \",\" + ianticlockwise + \";\");\n        }\n    }, {\n        key: 'fillText',\n        value: function fillText(text, x, y) {\n            var tmptext = text.replace(/!/g, \"!!\");\n            tmptext = tmptext.replace(/,/g, \"!,\");\n            tmptext = tmptext.replace(/;/g, \"!;\");\n            this._drawCommands = this._drawCommands.concat(\"T\" + tmptext + \",\" + x + \",\" + y + \",0.0;\");\n        }\n    }, {\n        key: 'drawImage',\n        value: function drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh) {\n            var numArgs = arguments.length;\n            function drawImageCommands() {\n\n                if (numArgs === 3) {\n                    var x = parseFloat(sx) || 0.0;\n                    var y = parseFloat(sy) || 0.0;\n\n                    return \"d\" + image._id + \",0,0,\" + image.width + \",\" + image.height + \",\" + x + \",\" + y + \",\" + image.width + \",\" + image.height + \";\";\n                } else if (numArgs === 5) {\n                    var _x = parseFloat(sx) || 0.0;\n                    var _y = parseFloat(sy) || 0.0;\n                    var width = parseInt(sw) || image.width;\n                    var height = parseInt(sh) || image.height;\n\n                    return \"d\" + image._id + \",0,0,\" + image.width + \",\" + image.height + \",\" + _x + \",\" + _y + \",\" + width + \",\" + height + \";\";\n                } else if (numArgs === 9) {\n                    sx = parseFloat(sx) || 0.0;\n                    sy = parseFloat(sy) || 0.0;\n                    sw = parseInt(sw) || image.width;\n                    sh = parseInt(sh) || image.height;\n                    dx = parseFloat(dx) || 0.0;\n                    dy = parseFloat(dy) || 0.0;\n                    dw = parseInt(dw) || image.width;\n                    dh = parseInt(dh) || image.height;\n\n                    return \"d\" + image._id + \",\" + sx + \",\" + sy + \",\" + sw + \",\" + sh + \",\" + dx + \",\" + dy + \",\" + dw + \",\" + dh + \";\";\n                }\n            }\n            CanvasRenderingContext2D.GBridge.bindImageTexture(this.componentId, image.src, image._id);\n            this._drawCommands += drawImageCommands();\n        }\n    }, {\n        key: 'fillStyle',\n        set: function set(value) {\n            this._fillStyle = value;\n\n            if (typeof value == 'string') {\n                this._drawCommands = this._drawCommands.concat(\"F\" + value + \";\");\n            } else if (value instanceof _FillStylePattern2.default) {\n                var image = value._img;\n                CanvasRenderingContext2D.GBridge.bindImageTexture(this.componentId, image.src, image._id);\n                this._drawCommands = this._drawCommands.concat(\"G\" + image._id + \",\" + value._style + \";\");\n            } else if (value instanceof _FillStyleLinearGradient2.default) {\n                var command = \"D\" + value._start_pos._x.toFixed(2) + \",\" + value._start_pos._y.toFixed(2) + \",\" + value._end_pos._x.toFixed(2) + \",\" + value._end_pos._y.toFixed(2) + \",\" + value._stop_count;\n                for (var i = 0; i < value._stop_count; ++i) {\n                    command += \",\" + value._stops[i]._pos + \",\" + value._stops[i]._color;\n                }\n                this._drawCommands = this._drawCommands.concat(command + \";\");\n            } else if (value instanceof _FillStyleRadialGradient2.default) {\n                var command = \"H\" + value._start_pos._x.toFixed(2) + \",\" + value._start_pos._y.toFixed(2) + \",\" + value._start_pos._r.toFixed(2) + \",\" + value._end_pos._x.toFixed(2) + \",\" + value._end_pos._y.toFixed(2) + \",\" + value._end_pos._r.toFixed(2) + \",\" + value._stop_count;\n                for (var i = 0; i < value._stop_count; ++i) {\n                    command += \",\" + value._stops[i]._pos + \",\" + value._stops[i]._color;\n                }\n                this._drawCommands = this._drawCommands.concat(command + \";\");\n            }\n        },\n        get: function get() {\n            return this._fillStyle;\n        }\n    }, {\n        key: 'globalAlpha',\n        get: function get() {\n            return this._globalAlpha;\n        },\n        set: function set(value) {\n            this._globalAlpha = value;\n            this._drawCommands = this._drawCommands.concat(\"a\" + value.toFixed(2) + \";\");\n        }\n    }, {\n        key: 'strokeStyle',\n        get: function get() {\n            return this._strokeStyle;\n        },\n        set: function set(value) {\n\n            this._strokeStyle = value;\n\n            if (typeof value == 'string') {\n                this._drawCommands = this._drawCommands.concat(\"S\" + value + \";\");\n            } else if (value instanceof _FillStylePattern2.default) {\n                var image = value._img;\n                CanvasRenderingContext2D.GBridge.bindImageTexture(this.componentId, image.src, image._id);\n                this._drawCommands = this._drawCommands.concat(\"G\" + image._id + \",\" + value._style + \";\");\n            } else if (value instanceof _FillStyleLinearGradient2.default) {\n                var command = \"D\" + value._start_pos._x.toFixed(2) + \",\" + value._start_pos._y.toFixed(2) + \",\" + value._end_pos._x.toFixed(2) + \",\" + value._end_pos._y.toFixed(2) + \",\" + value._stop_count;\n\n                for (var i = 0; i < value._stop_count; ++i) {\n                    command += \",\" + value._stops[i]._pos + \",\" + value._stops[i]._color;\n                }\n                this._drawCommands = this._drawCommands.concat(command + \";\");\n            } else if (value instanceof _FillStyleRadialGradient2.default) {\n                var command = \"H\" + value._start_pos._x.toFixed(2) + \",\" + value._start_pos._y.toFixed(2) + \",\" + value._start_pos._r.toFixed(2) + \",\" + value._end_pos._x.toFixed(2) + \",\" + value._end_pos._y + \",\".toFixed(2) + value._end_pos._r.toFixed(2) + \",\" + value._stop_count;\n\n                for (var i = 0; i < value._stop_count; ++i) {\n                    command += \",\" + value._stops[i]._pos + \",\" + value._stops[i]._color;\n                }\n                this._drawCommands = this._drawCommands.concat(command + \";\");\n            }\n        }\n    }, {\n        key: 'lineWidth',\n        get: function get() {\n            return this._lineWidth;\n        },\n        set: function set(value) {\n            this._lineWidth = value;\n            this._drawCommands = this._drawCommands.concat(\"W\" + value + \";\");\n        }\n    }, {\n        key: 'lineCap',\n        get: function get() {\n            return this._lineCap;\n        },\n        set: function set(value) {\n            this._lineCap = value;\n            this._drawCommands = this._drawCommands.concat(\"C\" + value + \";\");\n        }\n    }, {\n        key: 'lineJoin',\n        get: function get() {\n            return this._lineJoin;\n        },\n        set: function set(value) {\n            this._lineJoin = value;\n            this._drawCommands = this._drawCommands.concat(\"J\" + value + \";\");\n        }\n    }, {\n        key: 'miterLimit',\n        get: function get() {\n            return this._miterLimit;\n        },\n        set: function set(value) {\n            this._miterLimit = value;\n            this._drawCommands = this._drawCommands.concat(\"M\" + value + \";\");\n        }\n    }, {\n        key: 'globalCompositeOperation',\n        get: function get() {\n            return this._globalCompositeOperation;\n        },\n        set: function set(value) {\n\n            this._globalCompositeOperation = value;\n            var mode = 0;\n            switch (value) {\n                case \"source-over\":\n                    mode = 0;\n                    break;\n                case \"source-atop\":\n                    mode = 5;\n                    break;\n                case \"source-in\":\n                    mode = 0;\n                    break;\n                case \"source-out\":\n                    mode = 2;\n                    break;\n                case \"destination-over\":\n                    mode = 4;\n                    break;\n                case \"destination-atop\":\n                    mode = 4;\n                    break;\n                case \"destination-in\":\n                    mode = 4;\n                    break;\n                case \"destination-out\":\n                    mode = 3;\n                    break;\n                case \"lighter\":\n                    mode = 1;\n                    break;\n                case \"copy\":\n                    mode = 2;\n                    break;\n                case \"xor\":\n                    mode = 6;\n                    break;\n                default:\n                    mode = 0;\n            }\n\n            this._drawCommands = this._drawCommands.concat(\"B\" + mode + \";\");\n        }\n    }, {\n        key: 'textAlign',\n        get: function get() {\n            return this._textAlign;\n        },\n        set: function set(value) {\n\n            this._textAlign = value;\n            var Align = 0;\n            switch (value) {\n                case \"start\":\n                    Align = 0;\n                    break;\n                case \"end\":\n                    Align = 1;\n                    break;\n                case \"left\":\n                    Align = 2;\n                    break;\n                case \"center\":\n                    Align = 3;\n                    break;\n                case \"right\":\n                    Align = 4;\n                    break;\n                default:\n                    Align = 0;\n            }\n\n            this._drawCommands = this._drawCommands.concat(\"A\" + Align + \";\");\n        }\n    }, {\n        key: 'textBaseline',\n        get: function get() {\n            return this._textBaseline;\n        },\n        set: function set(value) {\n            this._textBaseline = value;\n            var baseline = 0;\n            switch (value) {\n                case \"alphabetic\":\n                    baseline = 0;\n                    break;\n                case \"middle\":\n                    baseline = 1;\n                    break;\n                case \"top\":\n                    baseline = 2;\n                    break;\n                case \"hanging\":\n                    baseline = 3;\n                    break;\n                case \"bottom\":\n                    baseline = 4;\n                    break;\n                case \"ideographic\":\n                    baseline = 5;\n                    break;\n                default:\n                    baseline = 0;\n                    break;\n            }\n\n            this._drawCommands = this._drawCommands.concat(\"E\" + baseline + \";\");\n        }\n    }, {\n        key: 'font',\n        get: function get() {\n            return this._font;\n        },\n        set: function set(value) {\n            this._font = value;\n            this._drawCommands = this._drawCommands.concat(\"j\" + value + \";\");\n        }\n    }]);\n\n    return CanvasRenderingContext2D;\n}();\n\nexports.default = CanvasRenderingContext2D;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _GLenum = __webpack_require__(14);\n\nvar _GLenum2 = _interopRequireDefault(_GLenum);\n\nvar _ActiveInfo = __webpack_require__(15);\n\nvar _ActiveInfo2 = _interopRequireDefault(_ActiveInfo);\n\nvar _Buffer = __webpack_require__(16);\n\nvar _Buffer2 = _interopRequireDefault(_Buffer);\n\nvar _Framebuffer = __webpack_require__(17);\n\nvar _Framebuffer2 = _interopRequireDefault(_Framebuffer);\n\nvar _Renderbuffer = __webpack_require__(18);\n\nvar _Renderbuffer2 = _interopRequireDefault(_Renderbuffer);\n\nvar _Texture = __webpack_require__(19);\n\nvar _Texture2 = _interopRequireDefault(_Texture);\n\nvar _Program = __webpack_require__(20);\n\nvar _Program2 = _interopRequireDefault(_Program);\n\nvar _Shader = __webpack_require__(21);\n\nvar _Shader2 = _interopRequireDefault(_Shader);\n\nvar _ShaderPrecisionFormat = __webpack_require__(22);\n\nvar _ShaderPrecisionFormat2 = _interopRequireDefault(_ShaderPrecisionFormat);\n\nvar _UniformLocation = __webpack_require__(23);\n\nvar _UniformLocation2 = _interopRequireDefault(_UniformLocation);\n\nvar _GLmethod = __webpack_require__(3);\n\nvar _GLmethod2 = _interopRequireDefault(_GLmethod);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar processArray = function processArray(array) {\n    var checkArrayType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\n    function joinArray(arr, sep) {\n        var res = '';\n        for (var i = 0; i < arr.length; i++) {\n            if (i !== 0) {\n                res += sep;\n            }\n            res += arr[i];\n        }\n        return res;\n    }\n\n    var type = 'Float32Array';\n    if (checkArrayType) {\n        if (array instanceof Uint8Array) {\n            type = 'Uint8Array';\n        } else if (array instanceof Uint16Array) {\n            type = 'Uint16Array';\n        } else if (array instanceof Uint32Array) {\n            type = 'Uint32Array';\n        } else if (array instanceof Float32Array) {\n            type = 'Float32Array';\n        } else {\n            throw new Error('Check array type failed. Array type is ' + (typeof array === 'undefined' ? 'undefined' : _typeof(array)));\n        }\n    }\n\n    var ArrayTypes = {\n        Uint8Array: 1,\n        Uint16Array: 2,\n        Uint32Array: 4,\n        Float32Array: 14\n    };\n    return ArrayTypes[type] + ',' + btoa(joinArray(array, ','));\n};\n\nvar WebGLRenderingContext = function () {\n    function WebGLRenderingContext(canvas, type, attrs) {\n        var _this = this;\n\n        _classCallCheck(this, WebGLRenderingContext);\n\n        _initialiseProps.call(this);\n\n        this._canvas = canvas;\n        this._type = type;\n        this._version = 'WebGL 1.0';\n        this._attrs = attrs;\n        this._map = new Map();\n\n        Object.keys(_GLenum2.default).forEach(function (name) {\n            return Object.defineProperty(_this, name, {\n                value: _GLenum2.default[name]\n            });\n        });\n    }\n\n    // static GBridge = null;\n\n    _createClass(WebGLRenderingContext, [{\n        key: 'canvas',\n        get: function get() {\n            return this._canvas;\n        }\n    }]);\n\n    return WebGLRenderingContext;\n}();\n\nvar _initialiseProps = function _initialiseProps() {\n    this.className = 'WebGLRenderingContext';\n\n    this.activeTexture = function (textureUnit) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.activeTexture + ',' + textureUnit, true);\n    };\n\n    this.attachShader = function (progarm, shader) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.attachShader + ',' + progarm.id + ',' + shader.id, true);\n    };\n\n    this.bindAttribLocation = function (program, index, name) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bindAttribLocation + ',' + program.id + ',' + index + ',' + name, true);\n    };\n\n    this.bindBuffer = function (target, buffer) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bindBuffer + ',' + target + ',' + (buffer ? buffer.id : 0), true);\n    };\n\n    this.bindFramebuffer = function (target, framebuffer) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bindFramebuffer + ',' + target + ',' + (framebuffer ? framebuffer.id : 0), true);\n    };\n\n    this.bindRenderbuffer = function (target, renderBuffer) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bindRenderbuffer + ',' + target + ',' + (renderBuffer ? renderBuffer.id : 0), true);\n    };\n\n    this.bindTexture = function (target, texture) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bindTexture + ',' + target + ',' + (texture ? texture.id : 0), true);\n    };\n\n    this.blendColor = function (r, g, b, a) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.blendColor + ',' + target + ',' + r + ',' + g + ',' + b + ',' + a, true);\n    };\n\n    this.blendEquation = function (mode) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.blendEquation + ',' + mode, true);\n    };\n\n    this.blendEquationSeparate = function (modeRGB, modeAlpha) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.blendEquationSeparate + ',' + modeRGB + ',' + modeAlpha, true);\n    };\n\n    this.blendFunc = function (sfactor, dfactor) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.blendFunc + ',' + sfactor + ',' + dfactor, true);\n    };\n\n    this.blendFuncSeparate = function (srcRGB, dstRGB, srcAlpha, dstAlpha) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.blendFuncSeparate + ',' + srcRGB + ',' + dstRGB + ',' + srcAlpha + ',' + dstAlpha, true);\n    };\n\n    this.bufferData = function (target, data, usage) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bufferData + ',' + target + ',' + processArray(data, true) + ',' + usage, true);\n    };\n\n    this.bufferSubData = function (target, offset, data) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.bufferSubData + ',' + target + ',' + offset + ',' + processArray(data, true), true);\n    };\n\n    this.checkFramebufferStatus = function (target) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.checkFramebufferStatus + ',' + target);\n        return Number(result);\n    };\n\n    this.clear = function (mask) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.clear + ',' + mask);\n        this._canvas._needRender = true;\n    };\n\n    this.clearColor = function (r, g, b, a) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.clearColor + ',' + r + ',' + g + ',' + b, true);\n    };\n\n    this.clearDepth = function (depth) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.clearDepth + ',' + depth, true);\n    };\n\n    this.clearStencil = function (s) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.clearStencil + ',' + s);\n    };\n\n    this.colorMask = function (r, g, b, a) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.colorMask + ',' + r + ',' + g + ',' + b + ',' + a);\n    };\n\n    this.compileShader = function (shader) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.compileShader + ',' + shader.id, true);\n    };\n\n    this.compressedTexImage2D = function (target, level, internalformat, width, height, border, pixels) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.compressedTexImage2D + ',' + target + ',' + level + ',' + internalformat + ',' + width + ',' + height + ',' + border + ',' + processArray(pixels), true);\n    };\n\n    this.compressedTexSubImage2D = function (target, level, xoffset, yoffset, width, height, format, pixels) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.compressedTexSubImage2D + ',' + target + ',' + level + ',' + xoffset + ',' + yoffset + ',' + width + ',' + height + ',' + format + ',' + processArray(pixels), true);\n    };\n\n    this.copyTexImage2D = function (target, level, internalformat, x, y, width, height, border) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.copyTexImage2D + ',' + target + ',' + level + ',' + internalformat + ',' + x + ',' + y + ',' + width + ',' + height + ',' + border, true);\n    };\n\n    this.copyTexSubImage2D = function (target, level, xoffset, yoffset, x, y, width, height) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.copyTexSubImage2D + ',' + target + ',' + level + ',' + xoffset + ',' + yoffset + ',' + x + ',' + y + ',' + width + ',' + height);\n    };\n\n    this.createBuffer = function () {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.createBuffer + '');\n        var buffer = new _Buffer2.default(result);\n        this._map.set(buffer.uuid(), buffer);\n        return buffer;\n    };\n\n    this.createFramebuffer = function () {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.createFramebuffer + '');\n        var framebuffer = new _Framebuffer2.default(result);\n        this._map.set(framebuffer.uuid(), framebuffer);\n        return framebuffer;\n    };\n\n    this.createProgram = function () {\n        var id = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.createProgram + '');\n        var program = new _Program2.default(id);\n        this._map.set(program.uuid(), program);\n        return program;\n    };\n\n    this.createRenderbuffer = function () {\n        var id = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.createRenderbuffer + '');\n        var renderBuffer = new _Renderbuffer2.default(id);\n        this._map.set(renderBuffer.uuid(), renderBuffer);\n        return renderBuffer;\n    };\n\n    this.createShader = function (type) {\n        var id = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.createShader + ',' + type);\n        var shader = new _Shader2.default(id, type);\n        this._map.set(shader.uuid(), shader);\n        return shader;\n    };\n\n    this.createTexture = function () {\n        var id = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.createTexture + '');\n        var texture = new _Texture2.default(id);\n        this._map.set(texture.uuid(), texture);\n        return texture;\n    };\n\n    this.cullFace = function (mode) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.cullFace + ',' + mode, true);\n    };\n\n    this.deleteBuffer = function (buffer) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.deleteBuffer + ',' + buffer.id, true);\n    };\n\n    this.deleteFramebuffer = function (framebuffer) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.deleteFramebuffer + ',' + framebuffer.id, true);\n    };\n\n    this.deleteProgram = function (program) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.deleteProgram + ',' + program.id, true);\n    };\n\n    this.deleteRenderbuffer = function (renderbuffer) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.deleteRenderbuffer + ',' + renderbuffer.id, true);\n    };\n\n    this.deleteShader = function (shader) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.deleteShader + ',' + shader.id, true);\n    };\n\n    this.deleteTexture = function (texture) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.deleteTexture + ',' + texture.id, true);\n    };\n\n    this.depthFunc = function (func) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.depthFunc + ',' + func);\n    };\n\n    this.depthMask = function (flag) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.depthMask + ',' + Number(flag), true);\n    };\n\n    this.depthRange = function (zNear, zFar) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.depthRange + ',' + zNear + ',' + zFar, true);\n    };\n\n    this.detachShader = function (program, shader) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.detachShader + ',' + program.id + ',' + shader.id, true);\n    };\n\n    this.disable = function (cap) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.disable + ',' + cap, true);\n    };\n\n    this.disableVertexAttribArray = function (index) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.disableVertexAttribArray + ',' + index, true);\n    };\n\n    this.drawArrays = function (mode, first, count) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.drawArrays + ',' + mode + ',' + first + ',' + count);\n        this._canvas._needRender = true;\n    };\n\n    this.drawElements = function (mode, count, type, offset) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.drawElements + ',' + mode + ',' + count + ',' + type + ',' + offset + ';');\n        this._canvas._needRender = true;\n    };\n\n    this.enable = function (cap) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.enable + ',' + cap, true);\n    };\n\n    this.enableVertexAttribArray = function (index) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.enableVertexAttribArray + ',' + index, true);\n    };\n\n    this.flush = function () {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.flush + '');\n    };\n\n    this.framebufferRenderbuffer = function (target, attachment, textarget, texture, level) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.framebufferRenderbuffer + ',' + target + ',' + attachment + ',' + textarget + ',' + (texture ? texture.id : 0) + ',' + level, true);\n    };\n\n    this.framebufferTexture2D = function (target, attachment, textarget, texture, level) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.framebufferTexture2D + ',' + target + ',' + attachment + ',' + textarget + ',' + (texture ? texture.id : 0) + ',' + level, true);\n    };\n\n    this.frontFace = function (mode) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.frontFace + ',' + mode, true);\n    };\n\n    this.generateMipmap = function (target) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.generateMipmap + ',' + target, true);\n    };\n\n    this.getActiveAttrib = function (progarm, index) {\n        var resultString = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getActiveAttrib + ',' + progarm.id + ',' + index);\n\n        var _resultString$split = resultString.split(','),\n            _resultString$split2 = _slicedToArray(_resultString$split, 3),\n            type = _resultString$split2[0],\n            size = _resultString$split2[1],\n            name = _resultString$split2[2];\n\n        return new _ActiveInfo2.default({\n            type: Number(type),\n            size: Number(size),\n            name: name\n        });\n    };\n\n    this.getActiveUniform = function (progarm, index) {\n        var resultString = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getActiveUniform + ',' + progarm.id + ',' + index);\n\n        var _resultString$split3 = resultString.split(','),\n            _resultString$split4 = _slicedToArray(_resultString$split3, 3),\n            type = _resultString$split4[0],\n            size = _resultString$split4[1],\n            name = _resultString$split4[2];\n\n        return new _ActiveInfo2.default({\n            type: Number(type),\n            size: Number(size),\n            name: name\n        });\n    };\n\n    this.getAttachedShaders = function (progarm) {\n        var _this2 = this;\n\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getAttachedShaders + ',' + progarm.id);\n\n        var _result = _toArray(result),\n            type = _result[0],\n            ids = _result.slice(1);\n\n        return ids.map(function (id) {\n            return _this2._map.get(_Shader2.default.uuid(id));\n        });\n    };\n\n    this.getAttribLocation = function (progarm, name) {\n        return WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getAttribLocation + ',' + progarm.id + ',' + name);\n    };\n\n    this.getBufferParameter = function (target, pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getBufferParameter + ',' + target + ',' + pname);\n\n        var _getBufferParameter = getBufferParameter,\n            _getBufferParameter2 = _slicedToArray(_getBufferParameter, 2),\n            type = _getBufferParameter2[0],\n            res = _getBufferParameter2[1];\n\n        return res;\n    };\n\n    this.getError = function () {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getError + '');\n        return result;\n    };\n\n    this.getExtension = function (name) {\n        return null;\n    };\n\n    this.getFramebufferAttachmentParameter = function (target, attachment, pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getFramebufferAttachmentParameter + ',' + target + ',' + attachment + ',' + pname);\n        switch (pname) {\n            case _GLenum2.default.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:\n                return this._map.get(_Renderbuffer2.default.uuid(result)) || this._map.get(_Texture2.default.uuid(result)) || null;\n            default:\n                return result;\n        }\n    };\n\n    this.getParameter = function (pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getParameter + ',' + pname);\n        switch (pname) {\n            case _GLenum2.default.VERSION:\n                return this._version;\n            case _GLenum2.default.ARRAY_BUFFER_BINDING: // buffer\n            case _GLenum2.default.ELEMENT_ARRAY_BUFFER_BINDING:\n                // buffer\n                return this._map.get(_Buffer2.default.uuid(result)) || null;\n            case _GLenum2.default.CURRENT_PROGRAM:\n                // program\n                return this._map.get(_Program2.default.uuid(result)) || null;\n            case _GLenum2.default.FRAMEBUFFER_BINDING:\n                // framebuffer\n                return this._map.get(_Framebuffer2.default.uuid(result)) || null;\n            case _GLenum2.default.RENDERBUFFER_BINDING:\n                // renderbuffer\n                return this._map.get(_Renderbuffer2.default.uuid(result)) || null;\n            case _GLenum2.default.TEXTURE_BINDING_2D: // texture\n            case _GLenum2.default.TEXTURE_BINDING_CUBE_MAP:\n                // texture\n                return this._map.get(_Texture2.default.uuid(result)) || null;\n            case _GLenum2.default.ALIASED_LINE_WIDTH_RANGE: // Float32Array\n            case _GLenum2.default.ALIASED_POINT_SIZE_RANGE: // Float32Array\n            case _GLenum2.default.BLEND_COLOR: // Float32Array\n            case _GLenum2.default.COLOR_CLEAR_VALUE: // Float32Array\n            case _GLenum2.default.DEPTH_RANGE: // Float32Array\n            case _GLenum2.default.MAX_VIEWPORT_DIMS: // Int32Array\n            case _GLenum2.default.SCISSOR_BOX: // Int32Array\n            case _GLenum2.default.VIEWPORT: // Int32Array            \n            case _GLenum2.default.COMPRESSED_TEXTURE_FORMATS: // Uint32Array\n            default:\n                var _result$split = result.split(','),\n                    _result$split2 = _toArray(_result$split),\n                    type = _result$split2[0],\n                    res = _result$split2.slice(1);\n\n                if (res.length === 1) {\n                    return Number(res[0]);\n                } else {\n                    return res.map(Number);\n                }\n        }\n    };\n\n    this.getProgramInfoLog = function (progarm) {\n        return WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getProgramInfoLog + ',' + progarm.id);\n    };\n\n    this.getProgramParameter = function (program, pname) {\n        var res = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getProgramParameter + ',' + program.id + ',' + pname);\n\n        var _res$split$map = res.split(',').map(function (i) {\n            return parseInt(i);\n        }),\n            _res$split$map2 = _slicedToArray(_res$split$map, 2),\n            type = _res$split$map2[0],\n            result = _res$split$map2[1];\n\n        if (type === 1) {\n            return Boolean(result);\n        } else if (type === 2) {\n            return result;\n        } else {\n            throw new Error('Unrecongized program paramater ' + res + ', type: ' + (typeof res === 'undefined' ? 'undefined' : _typeof(res)));\n        }\n    };\n\n    this.getRenderbufferParameter = function (target, pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getRenderbufferParameter + ',' + target + ',' + pname);\n        return result;\n    };\n\n    this.getShaderInfoLog = function (shader) {\n        return WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getShaderInfoLog + ',' + shader.id);\n    };\n\n    this.getShaderParameter = function (shader, pname) {\n        return WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getShaderParameter + ',' + shader.id + ',' + pname);\n    };\n\n    this.getShaderPrecisionFormat = function (shaderType, precisionType) {\n        var _WebGLRenderingContex = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getShaderPrecisionFormat + ',' + shaderType + ',' + precisionType),\n            _WebGLRenderingContex2 = _slicedToArray(_WebGLRenderingContex, 3),\n            rangeMin = _WebGLRenderingContex2[0],\n            rangeMax = _WebGLRenderingContex2[1],\n            precision = _WebGLRenderingContex2[2];\n\n        var shaderPrecisionFormat = new _ShaderPrecisionFormat2.default({\n            rangeMin: Number(rangeMin),\n            rangeMax: Number(rangeMax),\n            precision: Number(precision)\n        });\n        return shaderPrecisionFormat;\n    };\n\n    this.getShaderSource = function (shader) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getShaderSource + ',' + shader.id);\n        return result;\n    };\n\n    this.getSupportedExtensions = function () {\n        return Object.keys({});\n    };\n\n    this.getTexParameter = function (target, pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getTexParameter + ',' + target + ',' + pname);\n        return result;\n    };\n\n    this.getUniformLocation = function (program, name) {\n        var id = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getUniformLocation + ',' + program.id + ',' + name);\n        if (id === -1) {\n            return null;\n        } else {\n            return new _UniformLocation2.default(Number(id));\n        }\n    };\n\n    this.getVertexAttrib = function (index, pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getVertexAttrib + ',' + index + ',' + pname);\n        switch (pname) {\n            case _GLenum2.default.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:\n                return this._map.get(_Buffer2.default.uuid(result)) || null;\n            case _GLenum2.default.CURRENT_VERTEX_ATTRIB: // Float32Array\n            default:\n                return result;\n        }\n    };\n\n    this.getVertexAttribOffset = function (index, pname) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.getVertexAttribOffset + ',' + index + ',' + pname);\n        return Number(result);\n    };\n\n    this.isBuffer = function (buffer) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isBuffer + ',' + buffer.id);\n        return Boolean(result);\n    };\n\n    this.isContextLost = function () {\n        return false;\n    };\n\n    this.isEnabled = function (cap) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isEnabled + ',' + cap);\n        return Boolean(result);\n    };\n\n    this.isFramebuffer = function (framebuffer) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isFramebuffer + ',' + framebuffer.id);\n        return Boolean(result);\n    };\n\n    this.isProgram = function (program) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isProgram + ',' + program.id);\n        return Boolean(result);\n    };\n\n    this.isRenderbuffer = function (renderBuffer) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isRenderbuffer + ',' + renderbuffer.id);\n        return Boolean(result);\n    };\n\n    this.isShader = function (shader) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isShader + ',' + shader.id);\n        return Boolean(result);\n    };\n\n    this.isTexture = function (texture) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.isTexture + ',' + texture.id);\n        return Boolean(result);\n    };\n\n    this.lineWidth = function (width) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.lineWidth + ',' + width, true);\n    };\n\n    this.linkProgram = function (program) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.linkProgram + ',' + program.id, true);\n    };\n\n    this.pixelStorei = function (pname, param) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.pixelStorei + ',' + pname + ',' + Number(param));\n    };\n\n    this.polygonOffset = function (factor, units) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.polygonOffset + ',' + factor + ',' + units);\n    };\n\n    this.readPixels = function (x, y, width, height, format, type, pixels) {\n        var result = WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.readPixels + ',' + x + ',' + y + ',' + width + ',' + height + ',' + format + ',' + type);\n        return result;\n    };\n\n    this.renderbufferStorage = function (target, internalFormat, width, height) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.renderbufferStorage + ',' + target + ',' + internalFormat + ',' + width + ',' + height, true);\n    };\n\n    this.sampleCoverage = function (value, invert) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.sampleCoverage + ',' + value + ',' + Number(invert), true);\n    };\n\n    this.scissor = function (x, y, width, height) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.scissor + ',' + x + ',' + y + ',' + width + ',' + height, true);\n    };\n\n    this.shaderSource = function (shader, source) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.shaderSource + ',' + shader.id + ',' + source);\n    };\n\n    this.stencilFunc = function (func, ref, mask) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.stencilFunc + ',' + func + ',' + ref + ',' + mask, true);\n    };\n\n    this.stencilFuncSeparate = function (face, func, ref, mask) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.stencilFuncSeparate + ',' + face + ',' + func + ',' + ref + ',' + mask, true);\n    };\n\n    this.stencilMask = function (mask) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.stencilMask + ',' + mask, true);\n    };\n\n    this.stencilMaskSeparate = function (face, mask) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.stencilMaskSeparate + ',' + face + ',' + mask, true);\n    };\n\n    this.stencilOp = function (fail, zfail, zpass) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.stencilOp + ',' + fail + ',' + zfail + ',' + zpass);\n    };\n\n    this.stencilOpSeparate = function (face, fail, zfail, zpass) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.stencilOp + ',' + face + ',' + fail + ',' + zfail + ',' + zpass, true);\n    };\n\n    this.texImage2D = function () {\n        var _WebGLRenderingContex3;\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        (_WebGLRenderingContex3 = WebGLRenderingContext.GBridge).texImage2D.apply(_WebGLRenderingContex3, [this._canvas.id].concat(args));\n    };\n\n    this.texParameterf = function (target, pname, param) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.texParameterf + ',' + target + ',' + pname + ',' + param, true);\n    };\n\n    this.texParameteri = function (target, pname, param) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.texParameteri + ',' + target + ',' + pname + ',' + param);\n    };\n\n    this.texSubImage2D = function () {\n        var _WebGLRenderingContex4;\n\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n        }\n\n        (_WebGLRenderingContex4 = WebGLRenderingContext.GBridge).texSubImage2D.apply(_WebGLRenderingContex4, [this._canvas.id].concat(args));\n    };\n\n    this.uniform1f = function (location, v0) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform1f + ',' + location.id + ',' + v0);\n    };\n\n    this.uniform1fv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform1fv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform1i = function (location, v0) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform1i + ',' + location.id + ',' + v0\n        // true\n        );\n    };\n\n    this.uniform1iv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform1iv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform2f = function (location, v0, v1) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform2f + ',' + location.id + ',' + v0 + ',' + v1, true);\n    };\n\n    this.uniform2fv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform2fv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform2i = function (location, v0, v1) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform2i + ',' + location.id + ',' + v0 + ',' + v1, true);\n    };\n\n    this.uniform2iv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform2iv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform3f = function (location, v0, v1, v2) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform3f + ',' + location.id + ',' + v0 + ',' + v1 + ',' + v2, true);\n    };\n\n    this.uniform3fv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform3fv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform3i = function (location, v0, v1, v2) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform3i + ',' + location.id + ',' + v0 + ',' + v1 + ',' + v2, true);\n    };\n\n    this.uniform3iv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform3iv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform4f = function (location, v0, v1, v2, v3) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform4f + ',' + location.id + ',' + v0 + ',' + v1 + ',' + v2 + ',' + v3, true);\n    };\n\n    this.uniform4fv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform4fv + ',' + location.id + ',' + processArray(value), true);\n    };\n\n    this.uniform4i = function (location, v0, v1, v2, v3) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform4i + ',' + location.id + ',' + v0 + ',' + v1 + ',' + v2 + ',' + v3, true);\n    };\n\n    this.uniform4iv = function (location, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniform4iv + ',' + location.id + ',' + processArray(value, true), true);\n    };\n\n    this.uniformMatrix2fv = function (location, transpose, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniformMatrix2fv + ',' + location.id + ',' + Number(transpose) + ',' + processArray(value), true);\n    };\n\n    this.uniformMatrix3fv = function (location, transpose, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniformMatrix3fv + ',' + location.id + ',' + Number(transpose) + ',' + processArray(value), true);\n    };\n\n    this.uniformMatrix4fv = function (location, transpose, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.uniformMatrix4fv + ',' + location.id + ',' + Number(transpose) + ',' + processArray(value), true);\n    };\n\n    this.useProgram = function (progarm) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.useProgram + ',' + progarm.id + '', true);\n    };\n\n    this.validateProgram = function (program) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.validateProgram + ',' + program.id, true);\n    };\n\n    this.vertexAttrib1f = function (index, v0) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib1f + ',' + index + ',' + v0, true);\n    };\n\n    this.vertexAttrib2f = function (index, v0, v1) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib2f + ',' + index + ',' + v0 + ',' + v1, true);\n    };\n\n    this.vertexAttrib3f = function (index, v0, v1, v2) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib3f + ',' + index + ',' + v0 + ',' + v1 + ',' + v2, true);\n    };\n\n    this.vertexAttrib4f = function (index, v0, v1, v2, v3) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib4f + ',' + index + ',' + v0 + ',' + v1 + ',' + v2 + ',' + v3, true);\n    };\n\n    this.vertexAttrib1fv = function (index, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib1fv + ',' + index + ',' + processArray(value), true);\n    };\n\n    this.vertexAttrib2fv = function (index, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib2fv + ',' + index + ',' + processArray(value), true);\n    };\n\n    this.vertexAttrib3fv = function (index, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib3fv + ',' + index + ',' + processArray(value), true);\n    };\n\n    this.vertexAttrib4fv = function (index, value) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttrib4fv + ',' + index + ',' + processArray(value), true);\n    };\n\n    this.vertexAttribPointer = function (index, size, type, normalized, stride, offset) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.vertexAttribPointer + ',' + index + ',' + size + ',' + type + ',' + Number(normalized) + ',' + stride + ',' + offset, true);\n    };\n\n    this.viewport = function (x, y, width, height) {\n        WebGLRenderingContext.GBridge.callNative(this._canvas.id, _GLmethod2.default.viewport + ',' + x + ',' + y + ',' + width + ',' + height, true);\n    };\n};\n\nexports.default = WebGLRenderingContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar i = 1;\n\nvar GLmethod = {};\n\nGLmethod.activeTexture = i++; //1\nGLmethod.attachShader = i++;\nGLmethod.bindAttribLocation = i++;\nGLmethod.bindBuffer = i++;\nGLmethod.bindFramebuffer = i++;\nGLmethod.bindRenderbuffer = i++;\nGLmethod.bindTexture = i++;\nGLmethod.blendColor = i++;\nGLmethod.blendEquation = i++;\nGLmethod.blendEquationSeparate = i++; //10\nGLmethod.blendFunc = i++;\nGLmethod.blendFuncSeparate = i++;\nGLmethod.bufferData = i++;\nGLmethod.bufferSubData = i++;\nGLmethod.checkFramebufferStatus = i++;\nGLmethod.clear = i++;\nGLmethod.clearColor = i++;\nGLmethod.clearDepth = i++;\nGLmethod.clearStencil = i++;\nGLmethod.colorMask = i++; //20\nGLmethod.compileShader = i++;\nGLmethod.compressedTexImage2D = i++;\nGLmethod.compressedTexSubImage2D = i++;\nGLmethod.copyTexImage2D = i++;\nGLmethod.copyTexSubImage2D = i++;\nGLmethod.createBuffer = i++;\nGLmethod.createFramebuffer = i++;\nGLmethod.createProgram = i++;\nGLmethod.createRenderbuffer = i++;\nGLmethod.createShader = i++; //30\nGLmethod.createTexture = i++;\nGLmethod.cullFace = i++;\nGLmethod.deleteBuffer = i++;\nGLmethod.deleteFramebuffer = i++;\nGLmethod.deleteProgram = i++;\nGLmethod.deleteRenderbuffer = i++;\nGLmethod.deleteShader = i++;\nGLmethod.deleteTexture = i++;\nGLmethod.depthFunc = i++;\nGLmethod.depthMask = i++; //40\nGLmethod.depthRange = i++;\nGLmethod.detachShader = i++;\nGLmethod.disable = i++;\nGLmethod.disableVertexAttribArray = i++;\nGLmethod.drawArrays = i++;\nGLmethod.drawArraysInstancedANGLE = i++;\nGLmethod.drawElements = i++;\nGLmethod.drawElementsInstancedANGLE = i++;\nGLmethod.enable = i++;\nGLmethod.enableVertexAttribArray = i++; //50\nGLmethod.flush = i++;\nGLmethod.framebufferRenderbuffer = i++;\nGLmethod.framebufferTexture2D = i++;\nGLmethod.frontFace = i++;\nGLmethod.generateMipmap = i++;\nGLmethod.getActiveAttrib = i++;\nGLmethod.getActiveUniform = i++;\nGLmethod.getAttachedShaders = i++;\nGLmethod.getAttribLocation = i++;\nGLmethod.getBufferParameter = i++; //60\nGLmethod.getContextAttributes = i++;\nGLmethod.getError = i++;\nGLmethod.getExtension = i++;\nGLmethod.getFramebufferAttachmentParameter = i++;\nGLmethod.getParameter = i++;\nGLmethod.getProgramInfoLog = i++;\nGLmethod.getProgramParameter = i++;\nGLmethod.getRenderbufferParameter = i++;\nGLmethod.getShaderInfoLog = i++;\nGLmethod.getShaderParameter = i++; //70\nGLmethod.getShaderPrecisionFormat = i++;\nGLmethod.getShaderSource = i++;\nGLmethod.getSupportedExtensions = i++;\nGLmethod.getTexParameter = i++;\nGLmethod.getUniform = i++;\nGLmethod.getUniformLocation = i++;\nGLmethod.getVertexAttrib = i++;\nGLmethod.getVertexAttribOffset = i++;\nGLmethod.isBuffer = i++;\nGLmethod.isContextLost = i++; //80\nGLmethod.isEnabled = i++;\nGLmethod.isFramebuffer = i++;\nGLmethod.isProgram = i++;\nGLmethod.isRenderbuffer = i++;\nGLmethod.isShader = i++;\nGLmethod.isTexture = i++;\nGLmethod.lineWidth = i++;\nGLmethod.linkProgram = i++;\nGLmethod.pixelStorei = i++;\nGLmethod.polygonOffset = i++; //90\nGLmethod.readPixels = i++;\nGLmethod.renderbufferStorage = i++;\nGLmethod.sampleCoverage = i++;\nGLmethod.scissor = i++;\nGLmethod.shaderSource = i++;\nGLmethod.stencilFunc = i++;\nGLmethod.stencilFuncSeparate = i++;\nGLmethod.stencilMask = i++;\nGLmethod.stencilMaskSeparate = i++;\nGLmethod.stencilOp = i++; //100\nGLmethod.stencilOpSeparate = i++;\nGLmethod.texImage2D = i++;\nGLmethod.texParameterf = i++;\nGLmethod.texParameteri = i++;\nGLmethod.texSubImage2D = i++;\nGLmethod.uniform1f = i++;\nGLmethod.uniform1fv = i++;\nGLmethod.uniform1i = i++;\nGLmethod.uniform1iv = i++;\nGLmethod.uniform2f = i++; //110\nGLmethod.uniform2fv = i++;\nGLmethod.uniform2i = i++;\nGLmethod.uniform2iv = i++;\nGLmethod.uniform3f = i++;\nGLmethod.uniform3fv = i++;\nGLmethod.uniform3i = i++;\nGLmethod.uniform3iv = i++;\nGLmethod.uniform4f = i++;\nGLmethod.uniform4fv = i++;\nGLmethod.uniform4i = i++; //120\nGLmethod.uniform4iv = i++;\nGLmethod.uniformMatrix2fv = i++;\nGLmethod.uniformMatrix3fv = i++;\nGLmethod.uniformMatrix4fv = i++;\nGLmethod.useProgram = i++;\nGLmethod.validateProgram = i++;\nGLmethod.vertexAttrib1f = i++; //new\nGLmethod.vertexAttrib2f = i++; //new\nGLmethod.vertexAttrib3f = i++; //new\nGLmethod.vertexAttrib4f = i++; //new       //130\nGLmethod.vertexAttrib1fv = i++; //new\nGLmethod.vertexAttrib2fv = i++; //new\nGLmethod.vertexAttrib3fv = i++; //new\nGLmethod.vertexAttrib4fv = i++; //new\nGLmethod.vertexAttribPointer = i++;\nGLmethod.viewport = i++;\n\nexports.default = GLmethod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _texture = __webpack_require__(5);\n\nvar _texture2 = _interopRequireDefault(_texture);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_texture2.default.el = '#root';\nnew Vue(_texture2.default);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8udGVtcC90ZXh0dXJlLmpzPzY2MjkiXSwibmFtZXMiOlsiQXBwIiwiZWwiLCJWdWUiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUNBQSxrQkFBSUMsRUFBSixHQUFTLE9BQVQ7QUFDQSxJQUFJQyxHQUFKLENBQVFGLGlCQUFSIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwIGZyb20gJy4uL3RleHR1cmUudnVlJ1xuQXBwLmVsID0gJyNyb290J1xubmV3IFZ1ZShBcHApXG4gICAgXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLnRlbXAvdGV4dHVyZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = []\n\n/* styles */\n__vue_styles__.push(__webpack_require__(6)\n)\n\n/* script */\n__vue_exports__ = __webpack_require__(7)\n\n/* template */\nvar __vue_template__ = __webpack_require__(27)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/Users/didi/Downloads/gcanvas_merge_d1/GCanvas/js/weex-examples/texture.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n__vue_options__._scopeId = \"data-v-4b8fff06\"\n__vue_options__.style = __vue_options__.style || {}\n__vue_styles__.forEach(function (module) {\n  for (var name in module) {\n    __vue_options__.style[name] = module[name]\n  }\n})\nif (typeof __register_static_styles__ === \"function\") {\n  __register_static_styles__(__vue_options__._scopeId, __vue_styles__)\n}\n\nmodule.exports = __vue_exports__\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXh0dXJlLnZ1ZT85NWRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQyxDQUFzVjtBQUNsWDs7QUFFQTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLENBQStPOztBQUV6UTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLEVBQTJQO0FBQzFSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsbURBQW1ELElBQUk7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Z1ZV9leHBvcnRzX18sIF9fdnVlX29wdGlvbnNfX1xudmFyIF9fdnVlX3N0eWxlc19fID0gW11cblxuLyogc3R5bGVzICovXG5fX3Z1ZV9zdHlsZXNfXy5wdXNoKHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fd2VleC12dWUtbG9hZGVyQDAuNy4wQHdlZXgtdnVlLWxvYWRlci9saWIvc3R5bGUtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fd2VleC12dWUtbG9hZGVyQDAuNy4wQHdlZXgtdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXI/aWQ9ZGF0YS12LTRiOGZmZjA2IS4uLy4uLy4uLy4uLy4uLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fd2VleC12dWUtbG9hZGVyQDAuNy4wQHdlZXgtdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3RleHR1cmUudnVlXCIpXG4pXG5cbi8qIHNjcmlwdCAqL1xuX192dWVfZXhwb3J0c19fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLnd4L21vZHVsZXMvbm9kZV9tb2R1bGVzL193ZWV4LXZ1ZS1sb2FkZXJAMC43LjBAd2VleC12dWUtbG9hZGVyL2xpYi9zY3JpcHQtbG9hZGVyIWJhYmVsLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8ud3gvbW9kdWxlcy9ub2RlX21vZHVsZXMvX3dlZXgtdnVlLWxvYWRlckAwLjcuMEB3ZWV4LXZ1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi90ZXh0dXJlLnZ1ZVwiKVxuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8ud3gvbW9kdWxlcy9ub2RlX21vZHVsZXMvX3dlZXgtdnVlLWxvYWRlckAwLjcuMEB3ZWV4LXZ1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi00YjhmZmYwNiEuLi8uLi8uLi8uLi8uLi8ud3gvbW9kdWxlcy9ub2RlX21vZHVsZXMvX3dlZXgtdnVlLWxvYWRlckAwLjcuMEB3ZWV4LXZ1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3RleHR1cmUudnVlXCIpXG5fX3Z1ZV9vcHRpb25zX18gPSBfX3Z1ZV9leHBvcnRzX18gPSBfX3Z1ZV9leHBvcnRzX18gfHwge31cbmlmIChcbiAgdHlwZW9mIF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0ID09PSBcIm9iamVjdFwiIHx8XG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiXG4pIHtcbmlmIChPYmplY3Qua2V5cyhfX3Z1ZV9leHBvcnRzX18pLnNvbWUoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkgIT09IFwiX19lc01vZHVsZVwiIH0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fLmRlZmF1bHRcbn1cbmlmICh0eXBlb2YgX192dWVfb3B0aW9uc19fID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgX192dWVfb3B0aW9uc19fID0gX192dWVfb3B0aW9uc19fLm9wdGlvbnNcbn1cbl9fdnVlX29wdGlvbnNfXy5fX2ZpbGUgPSBcIi9Vc2Vycy9kaWRpL0Rvd25sb2Fkcy9nY2FudmFzX21lcmdlX2QxL0dDYW52YXMvanMvd2VleC1leGFtcGxlcy90ZXh0dXJlLnZ1ZVwiXG5fX3Z1ZV9vcHRpb25zX18ucmVuZGVyID0gX192dWVfdGVtcGxhdGVfXy5yZW5kZXJcbl9fdnVlX29wdGlvbnNfXy5zdGF0aWNSZW5kZXJGbnMgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnN0YXRpY1JlbmRlckZuc1xuX192dWVfb3B0aW9uc19fLl9zY29wZUlkID0gXCJkYXRhLXYtNGI4ZmZmMDZcIlxuX192dWVfb3B0aW9uc19fLnN0eWxlID0gX192dWVfb3B0aW9uc19fLnN0eWxlIHx8IHt9XG5fX3Z1ZV9zdHlsZXNfXy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiBtb2R1bGUpIHtcbiAgICBfX3Z1ZV9vcHRpb25zX18uc3R5bGVbbmFtZV0gPSBtb2R1bGVbbmFtZV1cbiAgfVxufSlcbmlmICh0eXBlb2YgX19yZWdpc3Rlcl9zdGF0aWNfc3R5bGVzX18gPT09IFwiZnVuY3Rpb25cIikge1xuICBfX3JlZ2lzdGVyX3N0YXRpY19zdHlsZXNfXyhfX3Z1ZV9vcHRpb25zX18uX3Njb3BlSWQsIF9fdnVlX3N0eWxlc19fKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX2V4cG9ydHNfX1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXh0dXJlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("module.exports = {\n  \"text\": {\n    \"fontSize\": 20\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXh0dXJlLnZ1ZT9iMDFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInRleHRcIjoge1xuICAgIFwiZm9udFNpemVcIjogMjBcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9Vc2Vycy9kaWRpLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fd2VleC12dWUtbG9hZGVyQDAuNy4wQHdlZXgtdnVlLWxvYWRlci9saWIvc3R5bGUtbG9hZGVyLmpzIS9Vc2Vycy9kaWRpLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fd2VleC12dWUtbG9hZGVyQDAuNy4wQHdlZXgtdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTRiOGZmZjA2IS9Vc2Vycy9kaWRpLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fd2VleC12dWUtbG9hZGVyQDAuNy4wQHdlZXgtdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3RleHR1cmUudnVlXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _compileShader = __webpack_require__(8);\n\nvar _index = __webpack_require__(9);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar isWeex = typeof callNative === \"function\";\n// import hackLog from \"./hack-log\";\n\n// var { enable, WeexBridge, Image: GImage } = require(\"../dist/gcanvas.min.js\");\n\nvar EnvImage = isWeex ? _index.Image : Image;\n\nfunction loadImage(url, callback) {\n  var image = new EnvImage();\n  image.crossOrigin = true;\n  image.onload = function () {\n    callback(image);\n  };\n  image.src = url;\n}\n\nfunction startTexture(ref) {\n\n  var gl = ref.getContext(\"webgl\");\n\n  // hackLog(gl);\n\n  var vShader = \"  \\nattribute vec2 aPosition;\\nattribute vec2 aTexCoord;\\nvarying vec2 vTexCoord;\\nvoid main() {\\n  vTexCoord = aTexCoord;  \\n  gl_Position = vec4(aPosition, 0, 1);\\n}\";\n  var fShader = \"\\nprecision mediump float;\\nuniform sampler2D uSample;\\nvarying vec2 vTexCoord;\\nvoid main() {\\n  gl_FragColor = texture2D(uSample, vTexCoord);\\n}\";\n\n  loadImage(\"https://img.alicdn.com/tfs/TB1apiEb8HH8KJjy0FbXXcqlpXa-1024-1024.png\", function (image) {\n    var _compile = (0, _compileShader.compile)({\n      vShader: vShader,\n      fShader: fShader,\n      gl: gl\n    }),\n        program = _compile.program,\n        attributes = _compile.attributes,\n        uniforms = _compile.uniforms,\n        fillElements = _compile.fillElements,\n        drawArrays = _compile.drawArrays,\n        drawElements = _compile.drawElements,\n        createElementsBuffer = _compile.createElementsBuffer;\n\n    fillElements(createElementsBuffer([0, 1, 2, 0, 2, 3]));\n    attributes.aPosition.fill(attributes.aPosition.createBuffer([-1, 1, -1, -1, 1, -1, 1, 1]));\n    attributes.aTexCoord.fill(attributes.aTexCoord.createBuffer([0, 1, 0, 0, 1, 0, 1, 1]));\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    var tex = uniforms.uSample.createTexture(image);\n    uniforms.uSample.fill(tex);\n\n    function render() {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      drawElements(6);\n    }\n\n    function tick() {\n      render();\n    }\n    tick();\n  });\n}\n\nexports.default = {\n  data: function data() {\n    return {\n      isWeex: isWeex\n    };\n  },\n\n\n  mounted: function mounted() {\n    var ref = this.$refs.canvas_holder;\n\n    if (isWeex) {\n      ref = (0, _index.enable)(ref, {\n        debug: false,\n        bridge: _index.WeexBridge\n      });\n    }\n\n    ref.width = WXEnvironment.deviceWidth;\n    ref.height = WXEnvironment.deviceWidth;\n\n    startTexture(ref);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXh0dXJlLnZ1ZT8wYjNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxDQUFDOztBQUVELHFCQUFxQixtQkFBTyxDQUFDLENBQWtCOztBQUUvQyxhQUFhLG1CQUFPLENBQUMsQ0FBaUI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFFBQVEsb0NBQW9DOztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLDhDQUE4QywyQkFBMkIseUJBQXlCLGVBQWUsMEJBQTBCLDBDQUEwQyxHQUFHO0FBQ3hMLDJDQUEyQyw0QkFBNEIseUJBQXlCLGVBQWUsaURBQWlELEdBQUc7O0FBRW5LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY29tcGlsZVNoYWRlciA9IHJlcXVpcmUoXCIuL2NvbXBpbGUtc2hhZGVyXCIpO1xuXG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL3NyYy9pbmRleC5qc1wiKTtcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuXG52YXIgaXNXZWV4ID0gdHlwZW9mIGNhbGxOYXRpdmUgPT09IFwiZnVuY3Rpb25cIjtcbi8vIGltcG9ydCBoYWNrTG9nIGZyb20gXCIuL2hhY2stbG9nXCI7XG5cbi8vIHZhciB7IGVuYWJsZSwgV2VleEJyaWRnZSwgSW1hZ2U6IEdJbWFnZSB9ID0gcmVxdWlyZShcIi4uL2Rpc3QvZ2NhbnZhcy5taW4uanNcIik7XG5cbnZhciBFbnZJbWFnZSA9IGlzV2VleCA/IF9pbmRleC5JbWFnZSA6IEltYWdlO1xuXG5mdW5jdGlvbiBsb2FkSW1hZ2UodXJsLCBjYWxsYmFjaykge1xuICB2YXIgaW1hZ2UgPSBuZXcgRW52SW1hZ2UoKTtcbiAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0cnVlO1xuICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FsbGJhY2soaW1hZ2UpO1xuICB9O1xuICBpbWFnZS5zcmMgPSB1cmw7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0VGV4dHVyZShyZWYpIHtcblxuICB2YXIgZ2wgPSByZWYuZ2V0Q29udGV4dChcIndlYmdsXCIpO1xuXG4gIC8vIGhhY2tMb2coZ2wpO1xuXG4gIHZhciB2U2hhZGVyID0gXCIgIFxcbmF0dHJpYnV0ZSB2ZWMyIGFQb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMiBhVGV4Q29vcmQ7XFxudmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG52b2lkIG1haW4oKSB7XFxuICB2VGV4Q29vcmQgPSBhVGV4Q29vcmQ7ICBcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNChhUG9zaXRpb24sIDAsIDEpO1xcbn1cIjtcbiAgdmFyIGZTaGFkZXIgPSBcIlxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGU7XFxudmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG52b2lkIG1haW4oKSB7XFxuICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZSwgdlRleENvb3JkKTtcXG59XCI7XG5cbiAgbG9hZEltYWdlKFwiaHR0cHM6Ly9pbWcuYWxpY2RuLmNvbS90ZnMvVEIxYXBpRWI4SEg4S0pqeTBGYlhYY3FscFhhLTEwMjQtMTAyNC5wbmdcIiwgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgdmFyIF9jb21waWxlID0gKDAsIF9jb21waWxlU2hhZGVyLmNvbXBpbGUpKHtcbiAgICAgIHZTaGFkZXI6IHZTaGFkZXIsXG4gICAgICBmU2hhZGVyOiBmU2hhZGVyLFxuICAgICAgZ2w6IGdsXG4gICAgfSksXG4gICAgICAgIHByb2dyYW0gPSBfY29tcGlsZS5wcm9ncmFtLFxuICAgICAgICBhdHRyaWJ1dGVzID0gX2NvbXBpbGUuYXR0cmlidXRlcyxcbiAgICAgICAgdW5pZm9ybXMgPSBfY29tcGlsZS51bmlmb3JtcyxcbiAgICAgICAgZmlsbEVsZW1lbnRzID0gX2NvbXBpbGUuZmlsbEVsZW1lbnRzLFxuICAgICAgICBkcmF3QXJyYXlzID0gX2NvbXBpbGUuZHJhd0FycmF5cyxcbiAgICAgICAgZHJhd0VsZW1lbnRzID0gX2NvbXBpbGUuZHJhd0VsZW1lbnRzLFxuICAgICAgICBjcmVhdGVFbGVtZW50c0J1ZmZlciA9IF9jb21waWxlLmNyZWF0ZUVsZW1lbnRzQnVmZmVyO1xuXG4gICAgZmlsbEVsZW1lbnRzKGNyZWF0ZUVsZW1lbnRzQnVmZmVyKFswLCAxLCAyLCAwLCAyLCAzXSkpO1xuICAgIGF0dHJpYnV0ZXMuYVBvc2l0aW9uLmZpbGwoYXR0cmlidXRlcy5hUG9zaXRpb24uY3JlYXRlQnVmZmVyKFstMSwgMSwgLTEsIC0xLCAxLCAtMSwgMSwgMV0pKTtcbiAgICBhdHRyaWJ1dGVzLmFUZXhDb29yZC5maWxsKGF0dHJpYnV0ZXMuYVRleENvb3JkLmNyZWF0ZUJ1ZmZlcihbMCwgMSwgMCwgMCwgMSwgMCwgMSwgMV0pKTtcblxuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuICAgIHZhciB0ZXggPSB1bmlmb3Jtcy51U2FtcGxlLmNyZWF0ZVRleHR1cmUoaW1hZ2UpO1xuICAgIHVuaWZvcm1zLnVTYW1wbGUuZmlsbCh0ZXgpO1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgICBkcmF3RWxlbWVudHMoNik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIHJlbmRlcigpO1xuICAgIH1cbiAgICB0aWNrKCk7XG4gIH0pO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzV2VleDogaXNXZWV4XG4gICAgfTtcbiAgfSxcblxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdmFyIHJlZiA9IHRoaXMuJHJlZnMuY2FudmFzX2hvbGRlcjtcblxuICAgIGlmIChpc1dlZXgpIHtcbiAgICAgIHJlZiA9ICgwLCBfaW5kZXguZW5hYmxlKShyZWYsIHtcbiAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICBicmlkZ2U6IF9pbmRleC5XZWV4QnJpZGdlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZWYud2lkdGggPSBXWEVudmlyb25tZW50LmRldmljZVdpZHRoO1xuICAgIHJlZi5oZWlnaHQgPSBXWEVudmlyb25tZW50LmRldmljZVdpZHRoO1xuXG4gICAgc3RhcnRUZXh0dXJlKHJlZik7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2RpZGkvLnd4L21vZHVsZXMvbm9kZV9tb2R1bGVzL193ZWV4LXZ1ZS1sb2FkZXJAMC43LjBAd2VleC12dWUtbG9hZGVyL2xpYi9zY3JpcHQtbG9hZGVyLmpzIS9Vc2Vycy9kaWRpLy53eC9tb2R1bGVzL25vZGVfbW9kdWxlcy9fYmFiZWwtbG9hZGVyQDcuMS41QGJhYmVsLWxvYWRlci9saWIhL1VzZXJzL2RpZGkvLnd4L21vZHVsZXMvbm9kZV9tb2R1bGVzL193ZWV4LXZ1ZS1sb2FkZXJAMC43LjBAd2VleC12dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vdGV4dHVyZS52dWVcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar textureCount = 0;\n\nfunction compile(_ref) {\n    var vShader = _ref.vShader,\n        fShader = _ref.fShader,\n        gl = _ref.gl,\n        options = _ref.options;\n\n\n    function createShaderProgram(vShaderSource, fShaderSource, gl) {\n\n        function loadShader(gl, type, source) {\n            var shader = gl.createShader(type);\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n                throw 'An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader);\n            }\n            return shader;\n        }\n\n        var fShader = loadShader(gl, gl.FRAGMENT_SHADER, fShaderSource);\n        var vShader = loadShader(gl, gl.VERTEX_SHADER, vShaderSource);\n\n        var program = gl.createProgram();\n        gl.attachShader(program, vShader);\n        gl.attachShader(program, fShader);\n        gl.linkProgram(program);\n\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            throw 'Unable to initialize the shader program: ' + gl.getProgramInfoLog(program);\n        }\n\n        var uniforms = [];\n        var attributes = [];\n\n        var attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n        for (var i = 0; i < attributeCount; i++) {\n            var attribute = gl.getActiveAttrib(program, i);\n            attributes.push(attribute);\n        }\n        var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (var _i = 0; _i < uniformCount; _i++) {\n            var uniform = gl.getActiveUniform(program, _i);\n            uniforms.push(uniform);\n        }\n\n        return {\n            program: program,\n            uniforms: uniforms, attributes: attributes\n        };\n    }\n\n    function getType(value, gl) {\n        var types = ['FLOAT', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'BOOL', 'BOOL_VEC2', 'BOOL_VEC3', 'BOOL_VEC4', 'SAMPLER_2D', 'SAMPLER_CUBE'];\n\n        for (var i = 0; i < types.length; i++) {\n            if (gl[types[i]] === value) {\n                return types[i];\n            }\n        }\n\n        throw 'get type failed ' + value;\n    }\n\n    function attributeManager(attribute, program, gl) {\n        var manager = {};\n        var type = getType(attribute.type, gl);\n        var position = gl.getAttribLocation(program, attribute.name);\n\n        var baseType = type.split('_')[0];\n        var vecType = type.split('_').length > 1 ? type.split('_')[1] : 'VEC1';\n        var vecSize = Number(vecType[3]);\n\n        var arrayTypeMap = {\n            'FLOAT': Float32Array,\n            'INT': Int16Array,\n            'BOOL': Uint8Array\n        };\n        var ArrayType = arrayTypeMap[baseType];\n\n        manager.fill = function (buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.vertexAttribPointer(position, vecSize, gl[baseType], false, 0, 0);\n            gl.enableVertexAttribArray(position);\n        };\n\n        manager.createBuffer = function (value) {\n            var buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new ArrayType(value), gl.STATIC_DRAW);\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n            return buffer;\n        };\n\n        return _extends({\n            type: type }, manager);\n    }\n\n    function uniformManager(uniform, program, gl) {\n        var manager = {};\n        var type = getType(uniform.type, gl);\n        var position = gl.getUniformLocation(program, uniform.name);\n\n        var baseType = type.split('_')[0];\n        var vecType = type.split('_').length > 1 ? type.split('_')[1] : 'VEC1';\n        var baseVecType = vecType.substr(0, 3);\n        var vecSize = Number(vecType[3]);\n\n        var arrayTypeMap = {\n            'FLOAT': Float32Array,\n            'INT': Int32Array,\n            'BOOL': Uint8Array\n        };\n        var ArrayType = arrayTypeMap[baseType];\n\n        var uniformMethodName = void 0;\n        switch (baseVecType) {\n            case 'VEC':\n                uniformMethodName = ['uniform', vecSize, baseType === 'FLOAT' ? 'f' : 'i', 'v'].join('');\n                manager.fill = function (data) {\n                    gl[uniformMethodName](position, new ArrayType(data));\n                };\n                break;\n            case 'MAT':\n                uniformMethodName = ['uniform', 'Matrix', vecSize, 'fv'].join('');\n                manager.fill = function (data) {\n                    gl[uniformMethodName](position, false, new ArrayType(data));\n                };\n                break;\n            case '2D':\n                {\n                    var textureUnitIndex = textureCount;\n                    var textureUnitName = 'TEXTURE' + textureUnitIndex;\n                    if (textureCount === maxTextureImageUnits) {\n                        throw 'texture size exceed max texture image units';\n                    } else {\n                        textureCount++;\n                    }\n\n                    manager.createTexture = function (image) {\n                        var flipY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                        var texture = gl.createTexture();\n\n                        gl.activeTexture(gl[textureUnitName]);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n                        if (flipY) {\n                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n                        }\n\n                        if (image instanceof Uint8Array) {\n                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\n                        } else {\n                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n                        }\n\n                        if (flipY) {\n                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        }\n\n                        gl.bindTexture(gl.TEXTURE_2D, null);\n                        return texture;\n                    };\n                    manager.fill = function (texture) {\n                        gl.activeTexture(gl[textureUnitName]);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                        gl.uniform1i(position, textureUnitIndex);\n                    };\n\n                    manager.update = function (texture, image) {\n                        gl.activeTexture(gl[textureUnitName]);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n                    };\n                    break;\n                }\n            default:\n                throw 'baseVecType invalid';\n        }\n\n        return _extends({ type: type }, manager);\n    }\n\n    var maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n    var _createShaderProgram = createShaderProgram(vShader, fShader, gl),\n        program = _createShaderProgram.program,\n        attributeList = _createShaderProgram.attributes,\n        uniformList = _createShaderProgram.uniforms;\n\n    var attributes = {};\n    var uniforms = {};\n    attributeList.forEach(function (attribute) {\n        attributes[attribute.name] = attributeManager(attribute, program, gl);\n    });\n    uniformList.forEach(function (uniform) {\n        var name = uniform.name;\n        if (name.endsWith('[0]')) {\n            name = name.replace('[0]', '');\n        }\n        uniforms[name] = uniformManager(uniform, program, gl);\n    });\n\n    gl.useProgram(program);\n\n    return {\n        program: program,\n        uniforms: uniforms,\n        attributes: attributes,\n\n        drawArrays: function drawArrays(count) {\n            gl.drawArrays(gl.TRIANGLES, 0, count);\n        },\n\n        drawElements: function drawElements(count) {\n            gl.drawElements(gl.TRIANGLES, count, gl.UNSIGNED_SHORT, 0);\n        },\n\n        createElementsBuffer: function createElementsBuffer(value) {\n            var buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(value), gl.STATIC_DRAW);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n            return buffer;\n        },\n\n        fillElements: function fillElements(buffer) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n            return buffer;\n        },\n\n        createFramebuffer: function createFramebuffer(width, height) {\n            var framebuffer = gl.createFramebuffer();\n\n            // the core to test framebuffer\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            return {};\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n            var tex = gl.createTexture();\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, tex);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\n\n            var renderbuffer = gl.createRenderbuffer();\n            gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n            return {\n                framebuffer: framebuffer,\n                texture: tex,\n                depthBuffer: renderbuffer\n            };\n        }\n    };\n}\n\nexports.compile = compile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ReactNativeBridge = exports.WeexBridge = exports.Image = undefined;\nexports.enable = enable;\n\nvar _canvas = __webpack_require__(10);\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _image = __webpack_require__(24);\n\nvar _image2 = _interopRequireDefault(_image);\n\nvar _RenderingContext = __webpack_require__(2);\n\nvar _RenderingContext2 = _interopRequireDefault(_RenderingContext);\n\nvar _RenderingContext3 = __webpack_require__(1);\n\nvar _RenderingContext4 = _interopRequireDefault(_RenderingContext3);\n\nvar _bridgeWeex = __webpack_require__(25);\n\nvar _bridgeWeex2 = _interopRequireDefault(_bridgeWeex);\n\nvar _bridgeReactnative = __webpack_require__(26);\n\nvar _bridgeReactnative2 = _interopRequireDefault(_bridgeReactnative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Image = exports.Image = _image2.default;\n\nvar WeexBridge = exports.WeexBridge = _bridgeWeex2.default;\nvar ReactNativeBridge = exports.ReactNativeBridge = _bridgeReactnative2.default;\n\nfunction enable(el) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        bridge = _ref.bridge,\n        debug = _ref.debug,\n        disableAutoSwap = _ref.disableAutoSwap,\n        disableComboCommands = _ref.disableComboCommands;\n\n    var GBridge = _image2.default.GBridge = _canvas2.default.GBridge = _RenderingContext2.default.GBridge = _RenderingContext4.default.GBridge = bridge;\n\n    GBridge.callEnable(el.ref, [0, // renderMode: 0--RENDERMODE_WHEN_DIRTY, 1--RENDERMODE_CONTINUOUSLY\n    -1, // hybridLayerType:  0--LAYER_TYPE_NONE 1--LAYER_TYPE_SOFTWARE 2--LAYER_TYPE_HARDWARE\n    false, // supportScroll\n    false, // newCanvasMode\n    1, // compatible\n    'white', // clearColor\n    false // sameLevel: newCanvasMode = true && true => GCanvasView and Webview is same level\n    ]);\n\n    if (debug === true) {\n        GBridge.callEnableDebug();\n    }\n    if (disableComboCommands) {\n        GBridge.callEnableDisableCombo();\n    }\n\n    var canvas = new _canvas2.default(el.ref, { disableAutoSwap: disableAutoSwap });\n    canvas.width = el.style.width;\n    canvas.height = el.style.height;\n\n    return canvas;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2luZGV4LmpzP2RhZWYiXSwibmFtZXMiOlsiZW5hYmxlIiwiSW1hZ2UiLCJHSW1hZ2UiLCJXZWV4QnJpZGdlIiwiR0JyaWRnZVdlZXgiLCJSZWFjdE5hdGl2ZUJyaWRnZSIsIkdCcmlkZ2VSZWFjdE5hdGl2ZSIsImVsIiwiYnJpZGdlIiwiZGVidWciLCJkaXNhYmxlQXV0b1N3YXAiLCJkaXNhYmxlQ29tYm9Db21tYW5kcyIsIkdCcmlkZ2UiLCJHQ2FudmFzIiwiR1dlYkdMUmVuZGVyaW5nQ29udGV4dCIsIkdDb250ZXh0MkQiLCJjYWxsRW5hYmxlIiwicmVmIiwiY2FsbEVuYWJsZURlYnVnIiwiY2FsbEVuYWJsZURpc2FibGVDb21ibyIsImNhbnZhcyIsIndpZHRoIiwic3R5bGUiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7OztRQWNnQkEsTSxHQUFBQSxNOztBQWRoQjs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVPLElBQUlDLHdCQUFRQyxlQUFaOztBQUVBLElBQUlDLGtDQUFhQyxvQkFBakI7QUFDQSxJQUFJQyxnREFBb0JDLDJCQUF4Qjs7QUFFQSxTQUFTTixNQUFULENBQWdCTyxFQUFoQixFQUFtRjtBQUFBLG1GQUFKLEVBQUk7QUFBQSxRQUE3REMsTUFBNkQsUUFBN0RBLE1BQTZEO0FBQUEsUUFBckRDLEtBQXFELFFBQXJEQSxLQUFxRDtBQUFBLFFBQTlDQyxlQUE4QyxRQUE5Q0EsZUFBOEM7QUFBQSxRQUE3QkMsb0JBQTZCLFFBQTdCQSxvQkFBNkI7O0FBRXRGLFFBQU1DLFVBQVVWLGdCQUFPVSxPQUFQLEdBQWlCQyxpQkFBUUQsT0FBUixHQUFrQkUsMkJBQXVCRixPQUF2QixHQUFpQ0csMkJBQVdILE9BQVgsR0FBcUJKLE1BQXpHOztBQUVBSSxZQUFRSSxVQUFSLENBQW1CVCxHQUFHVSxHQUF0QixFQUEyQixDQUN2QixDQUR1QixFQUNmO0FBQ1IsS0FBQyxDQUZzQixFQUVmO0FBQ1IsU0FIdUIsRUFHZjtBQUNSLFNBSnVCLEVBSWY7QUFDUixLQUx1QixFQUtmO0FBQ1IsV0FOdUIsRUFNZjtBQUNSLFNBUHVCLENBT2Y7QUFQZSxLQUEzQjs7QUFVQSxRQUFJUixVQUFVLElBQWQsRUFBb0I7QUFDaEJHLGdCQUFRTSxlQUFSO0FBQ0g7QUFDRCxRQUFJUCxvQkFBSixFQUEwQjtBQUN0QkMsZ0JBQVFPLHNCQUFSO0FBQ0g7O0FBRUQsUUFBSUMsU0FBUyxJQUFJUCxnQkFBSixDQUFZTixHQUFHVSxHQUFmLEVBQW9CLEVBQUVQLGdDQUFGLEVBQXBCLENBQWI7QUFDQVUsV0FBT0MsS0FBUCxHQUFlZCxHQUFHZSxLQUFILENBQVNELEtBQXhCO0FBQ0FELFdBQU9HLE1BQVAsR0FBZ0JoQixHQUFHZSxLQUFILENBQVNDLE1BQXpCOztBQUVBLFdBQU9ILE1BQVA7QUFDSCIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdDYW52YXMgZnJvbSAnLi9lbnYvY2FudmFzJztcbmltcG9ydCBHSW1hZ2UgZnJvbSAnLi9lbnYvaW1hZ2UnO1xuXG5pbXBvcnQgR1dlYkdMUmVuZGVyaW5nQ29udGV4dCBmcm9tICcuL2NvbnRleHQtd2ViZ2wvUmVuZGVyaW5nQ29udGV4dCc7XG5pbXBvcnQgR0NvbnRleHQyRCBmcm9tICcuL2NvbnRleHQtMmQvUmVuZGVyaW5nQ29udGV4dCc7XG5cbmltcG9ydCBHQnJpZGdlV2VleCBmcm9tICcuL2JyaWRnZS9icmlkZ2Utd2VleCc7XG5pbXBvcnQgR0JyaWRnZVJlYWN0TmF0aXZlIGZyb20gJy4vYnJpZGdlL2JyaWRnZS1yZWFjdG5hdGl2ZSc7XG5cbmV4cG9ydCBsZXQgSW1hZ2UgPSBHSW1hZ2U7XG5cbmV4cG9ydCBsZXQgV2VleEJyaWRnZSA9IEdCcmlkZ2VXZWV4O1xuZXhwb3J0IGxldCBSZWFjdE5hdGl2ZUJyaWRnZSA9IEdCcmlkZ2VSZWFjdE5hdGl2ZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZShlbCwgeyBicmlkZ2UsIGRlYnVnLCBkaXNhYmxlQXV0b1N3YXAsIGRpc2FibGVDb21ib0NvbW1hbmRzIH0gPSB7fSkge1xuXG4gICAgY29uc3QgR0JyaWRnZSA9IEdJbWFnZS5HQnJpZGdlID0gR0NhbnZhcy5HQnJpZGdlID0gR1dlYkdMUmVuZGVyaW5nQ29udGV4dC5HQnJpZGdlID0gR0NvbnRleHQyRC5HQnJpZGdlID0gYnJpZGdlO1xuXG4gICAgR0JyaWRnZS5jYWxsRW5hYmxlKGVsLnJlZiwgW1xuICAgICAgICAwLCAgICAgIC8vIHJlbmRlck1vZGU6IDAtLVJFTkRFUk1PREVfV0hFTl9ESVJUWSwgMS0tUkVOREVSTU9ERV9DT05USU5VT1VTTFlcbiAgICAgICAgLTEsICAgICAvLyBoeWJyaWRMYXllclR5cGU6ICAwLS1MQVlFUl9UWVBFX05PTkUgMS0tTEFZRVJfVFlQRV9TT0ZUV0FSRSAyLS1MQVlFUl9UWVBFX0hBUkRXQVJFXG4gICAgICAgIGZhbHNlLCAgLy8gc3VwcG9ydFNjcm9sbFxuICAgICAgICBmYWxzZSwgIC8vIG5ld0NhbnZhc01vZGVcbiAgICAgICAgMSwgICAgICAvLyBjb21wYXRpYmxlXG4gICAgICAgICd3aGl0ZScsLy8gY2xlYXJDb2xvclxuICAgICAgICBmYWxzZSAgIC8vIHNhbWVMZXZlbDogbmV3Q2FudmFzTW9kZSA9IHRydWUgJiYgdHJ1ZSA9PiBHQ2FudmFzVmlldyBhbmQgV2VidmlldyBpcyBzYW1lIGxldmVsXG4gICAgXSk7XG5cbiAgICBpZiAoZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgR0JyaWRnZS5jYWxsRW5hYmxlRGVidWcoKTtcbiAgICB9XG4gICAgaWYgKGRpc2FibGVDb21ib0NvbW1hbmRzKSB7XG4gICAgICAgIEdCcmlkZ2UuY2FsbEVuYWJsZURpc2FibGVDb21ibygpO1xuICAgIH1cblxuICAgIHZhciBjYW52YXMgPSBuZXcgR0NhbnZhcyhlbC5yZWYsIHsgZGlzYWJsZUF1dG9Td2FwIH0pO1xuICAgIGNhbnZhcy53aWR0aCA9IGVsLnN0eWxlLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBlbC5zdHlsZS5oZWlnaHQ7XG5cbiAgICByZXR1cm4gY2FudmFzO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _RenderingContext = __webpack_require__(1);\n\nvar _RenderingContext2 = _interopRequireDefault(_RenderingContext);\n\nvar _RenderingContext3 = __webpack_require__(2);\n\nvar _RenderingContext4 = _interopRequireDefault(_RenderingContext3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar GCanvas = function () {\n\n    // static GBridge = null;\n\n    function GCanvas(id, _ref) {\n        var _this = this;\n\n        var disableAutoSwap = _ref.disableAutoSwap;\n\n        _classCallCheck(this, GCanvas);\n\n        this.id = null;\n        this._needRender = true;\n\n        this.id = id;\n\n        this._disableAutoSwap = disableAutoSwap;\n        if (disableAutoSwap) {\n            this._swapBuffers = function () {\n                GCanvas.GBridge.render(_this.id);\n            };\n        }\n    }\n\n    _createClass(GCanvas, [{\n        key: 'getContext',\n        value: function getContext(type) {\n            var _this2 = this;\n\n            var context = null;\n\n            if (type.match(/webgl/i)) {\n                context = new _RenderingContext4.default(this);\n\n                context.componentId = this.id;\n\n                if (!this._disableAutoSwap) {\n                    var render = function render() {\n                        if (_this2._needRender) {\n                            GCanvas.GBridge.render(_this2.id);\n                            _this2._needRender = false;\n                        }\n                    };\n                    setInterval(render, 16);\n                }\n\n                GCanvas.GBridge.callSetContextType(this.id, 1); // 0 for 2d; 1 for webgl\n            } else if (type.match(/2d/i)) {\n                context = new _RenderingContext2.default(this);\n\n                context.componentId = this.id;\n\n                var _render = function _render() {\n\n                    var commands = context._drawCommands;\n                    context._drawCommands = '';\n\n                    GCanvas.GBridge.render2d(_this2.id, commands);\n                    _this2._needRender = false;\n                };\n                setInterval(_render, 16);\n\n                GCanvas.GBridge.callSetContextType(this.id, 0);\n            } else {\n                throw new Error('not supported context ' + type);\n            }\n\n            return context;\n        }\n    }, {\n        key: 'reset',\n        value: function reset() {\n            GCanvas.GBridge.callReset(this.id);\n        }\n    }]);\n\n    return GCanvas;\n}();\n\nexports.default = GCanvas;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2Vudi9jYW52YXMuanM/MWUwNiJdLCJuYW1lcyI6WyJHQ2FudmFzIiwiaWQiLCJkaXNhYmxlQXV0b1N3YXAiLCJfbmVlZFJlbmRlciIsIl9kaXNhYmxlQXV0b1N3YXAiLCJfc3dhcEJ1ZmZlcnMiLCJHQnJpZGdlIiwicmVuZGVyIiwidHlwZSIsImNvbnRleHQiLCJtYXRjaCIsIkdDb250ZXh0V2ViR0wiLCJjb21wb25lbnRJZCIsInNldEludGVydmFsIiwiY2FsbFNldENvbnRleHRUeXBlIiwiR0NvbnRleHQyRCIsImNvbW1hbmRzIiwiX2RyYXdDb21tYW5kcyIsInJlbmRlcjJkIiwiRXJyb3IiLCJjYWxsUmVzZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7Ozs7SUFFcUJBLE87O0FBRWpCOztBQU1BLHFCQUFZQyxFQUFaLFFBQXFDO0FBQUE7O0FBQUEsWUFBbkJDLGVBQW1CLFFBQW5CQSxlQUFtQjs7QUFBQTs7QUFBQSxhQUpyQ0QsRUFJcUMsR0FKaEMsSUFJZ0M7QUFBQSxhQUZyQ0UsV0FFcUMsR0FGdkIsSUFFdUI7O0FBQ2pDLGFBQUtGLEVBQUwsR0FBVUEsRUFBVjs7QUFFQSxhQUFLRyxnQkFBTCxHQUF3QkYsZUFBeEI7QUFDQSxZQUFJQSxlQUFKLEVBQXFCO0FBQ2pCLGlCQUFLRyxZQUFMLEdBQW9CLFlBQU07QUFDdEJMLHdCQUFRTSxPQUFSLENBQWdCQyxNQUFoQixDQUF1QixNQUFLTixFQUE1QjtBQUNILGFBRkQ7QUFHSDtBQUNKOzs7O21DQUVVTyxJLEVBQU07QUFBQTs7QUFFYixnQkFBSUMsVUFBVSxJQUFkOztBQUVBLGdCQUFJRCxLQUFLRSxLQUFMLENBQVcsUUFBWCxDQUFKLEVBQTBCO0FBQ3RCRCwwQkFBVSxJQUFJRSwwQkFBSixDQUFrQixJQUFsQixDQUFWOztBQUVBRix3QkFBUUcsV0FBUixHQUFzQixLQUFLWCxFQUEzQjs7QUFFQSxvQkFBSSxDQUFDLEtBQUtHLGdCQUFWLEVBQTRCO0FBQ3hCLHdCQUFNRyxTQUFTLFNBQVRBLE1BQVMsR0FBTTtBQUNqQiw0QkFBSSxPQUFLSixXQUFULEVBQXNCO0FBQ2xCSCxvQ0FBUU0sT0FBUixDQUFnQkMsTUFBaEIsQ0FBdUIsT0FBS04sRUFBNUI7QUFDQSxtQ0FBS0UsV0FBTCxHQUFtQixLQUFuQjtBQUNIO0FBQ0oscUJBTEQ7QUFNQVUsZ0NBQVlOLE1BQVosRUFBb0IsRUFBcEI7QUFDSDs7QUFFRFAsd0JBQVFNLE9BQVIsQ0FBZ0JRLGtCQUFoQixDQUFtQyxLQUFLYixFQUF4QyxFQUE0QyxDQUE1QyxFQWZzQixDQWUwQjtBQUNuRCxhQWhCRCxNQWdCTyxJQUFJTyxLQUFLRSxLQUFMLENBQVcsS0FBWCxDQUFKLEVBQXVCO0FBQzFCRCwwQkFBVSxJQUFJTSwwQkFBSixDQUFlLElBQWYsQ0FBVjs7QUFFQU4sd0JBQVFHLFdBQVIsR0FBc0IsS0FBS1gsRUFBM0I7O0FBRUEsb0JBQU1NLFVBQVMsU0FBVEEsT0FBUyxHQUFNOztBQUVqQix3QkFBTVMsV0FBV1AsUUFBUVEsYUFBekI7QUFDQVIsNEJBQVFRLGFBQVIsR0FBd0IsRUFBeEI7O0FBRUFqQiw0QkFBUU0sT0FBUixDQUFnQlksUUFBaEIsQ0FBeUIsT0FBS2pCLEVBQTlCLEVBQWtDZSxRQUFsQztBQUNBLDJCQUFLYixXQUFMLEdBQW1CLEtBQW5CO0FBRUgsaUJBUkQ7QUFTQVUsNEJBQVlOLE9BQVosRUFBb0IsRUFBcEI7O0FBRUFQLHdCQUFRTSxPQUFSLENBQWdCUSxrQkFBaEIsQ0FBbUMsS0FBS2IsRUFBeEMsRUFBNEMsQ0FBNUM7QUFDSCxhQWpCTSxNQWlCQTtBQUNILHNCQUFNLElBQUlrQixLQUFKLENBQVUsMkJBQTJCWCxJQUFyQyxDQUFOO0FBQ0g7O0FBRUQsbUJBQU9DLE9BQVA7QUFFSDs7O2dDQUVPO0FBQ0pULG9CQUFRTSxPQUFSLENBQWdCYyxTQUFoQixDQUEwQixLQUFLbkIsRUFBL0I7QUFDSDs7Ozs7O2tCQWxFZ0JELE8iLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR0NvbnRleHQyRCBmcm9tICcuLi9jb250ZXh0LTJkL1JlbmRlcmluZ0NvbnRleHQnO1xuaW1wb3J0IEdDb250ZXh0V2ViR0wgZnJvbSAnLi4vY29udGV4dC13ZWJnbC9SZW5kZXJpbmdDb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0NhbnZhcyB7XG5cbiAgICAvLyBzdGF0aWMgR0JyaWRnZSA9IG51bGw7XG5cbiAgICBpZCA9IG51bGw7XG5cbiAgICBfbmVlZFJlbmRlciA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihpZCwgeyBkaXNhYmxlQXV0b1N3YXAgfSkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgdGhpcy5fZGlzYWJsZUF1dG9Td2FwID0gZGlzYWJsZUF1dG9Td2FwO1xuICAgICAgICBpZiAoZGlzYWJsZUF1dG9Td2FwKSB7XG4gICAgICAgICAgICB0aGlzLl9zd2FwQnVmZmVycyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBHQ2FudmFzLkdCcmlkZ2UucmVuZGVyKHRoaXMuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q29udGV4dCh0eXBlKSB7XG5cbiAgICAgICAgbGV0IGNvbnRleHQgPSBudWxsO1xuXG4gICAgICAgIGlmICh0eXBlLm1hdGNoKC93ZWJnbC9pKSkge1xuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBHQ29udGV4dFdlYkdMKHRoaXMpO1xuXG4gICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudElkID0gdGhpcy5pZDtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXNhYmxlQXV0b1N3YXApIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9uZWVkUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBHQ2FudmFzLkdCcmlkZ2UucmVuZGVyKHRoaXMuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmVlZFJlbmRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldEludGVydmFsKHJlbmRlciwgMTYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBHQ2FudmFzLkdCcmlkZ2UuY2FsbFNldENvbnRleHRUeXBlKHRoaXMuaWQsIDEpOyAvLyAwIGZvciAyZDsgMSBmb3Igd2ViZ2xcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlLm1hdGNoKC8yZC9pKSkge1xuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBHQ29udGV4dDJEKHRoaXMpO1xuXG4gICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudElkID0gdGhpcy5pZDtcblxuICAgICAgICAgICAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZHMgPSBjb250ZXh0Ll9kcmF3Q29tbWFuZHM7XG4gICAgICAgICAgICAgICAgY29udGV4dC5fZHJhd0NvbW1hbmRzID0gJyc7XG5cbiAgICAgICAgICAgICAgICBHQ2FudmFzLkdCcmlkZ2UucmVuZGVyMmQodGhpcy5pZCwgY29tbWFuZHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX25lZWRSZW5kZXIgPSBmYWxzZTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0SW50ZXJ2YWwocmVuZGVyLCAxNik7XG5cbiAgICAgICAgICAgIEdDYW52YXMuR0JyaWRnZS5jYWxsU2V0Q29udGV4dFR5cGUodGhpcy5pZCwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0ZWQgY29udGV4dCAnICsgdHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udGV4dDtcblxuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICBHQ2FudmFzLkdCcmlkZ2UuY2FsbFJlc2V0KHRoaXMuaWQpO1xuICAgIH1cblxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9lbnYvY2FudmFzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FillStylePattern = function FillStylePattern(img, pattern) {\n    _classCallCheck(this, FillStylePattern);\n\n    this._style = pattern;\n    this._img = img;\n};\n\nexports.default = FillStylePattern;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtMmQvRmlsbFN0eWxlUGF0dGVybi5qcz83YmExIl0sIm5hbWVzIjpbIkZpbGxTdHlsZVBhdHRlcm4iLCJpbWciLCJwYXR0ZXJuIiwiX3N0eWxlIiwiX2ltZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7SUFBTUEsZ0IsR0FDRiwwQkFBWUMsR0FBWixFQUFpQkMsT0FBakIsRUFBMEI7QUFBQTs7QUFDdEIsU0FBS0MsTUFBTCxHQUFjRCxPQUFkO0FBQ0EsU0FBS0UsSUFBTCxHQUFZSCxHQUFaO0FBQ0gsQzs7a0JBR1VELGdCIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRmlsbFN0eWxlUGF0dGVybiB7XG4gICAgY29uc3RydWN0b3IoaW1nLCBwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMuX3N0eWxlID0gcGF0dGVybjtcbiAgICAgICAgdGhpcy5faW1nID0gaW1nO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsbFN0eWxlUGF0dGVybjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vc3JjL2NvbnRleHQtMmQvRmlsbFN0eWxlUGF0dGVybi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FillStyleLinearGradient = function FillStyleLinearGradient(x0, y0, x1, y1) {\n    _classCallCheck(this, FillStyleLinearGradient);\n\n    this.addColorStop = function (pos, color) {\n        if (this._stop_count < 5 && 0.0 <= pos && pos <= 1.0) {\n            this._stops[this._stop_count] = { _pos: pos, _color: color };\n            this._stop_count++;\n        }\n    };\n\n    this._start_pos = { _x: x0, _y: y0 };\n    this._end_pos = { _x: x1, _y: y1 };\n    this._stop_count = 0;\n    this._stops = [0, 0, 0, 0, 0];\n};\n\nexports.default = FillStyleLinearGradient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtMmQvRmlsbFN0eWxlTGluZWFyR3JhZGllbnQuanM/ZTJkZiJdLCJuYW1lcyI6WyJGaWxsU3R5bGVMaW5lYXJHcmFkaWVudCIsIngwIiwieTAiLCJ4MSIsInkxIiwiYWRkQ29sb3JTdG9wIiwicG9zIiwiY29sb3IiLCJfc3RvcF9jb3VudCIsIl9zdG9wcyIsIl9wb3MiLCJfY29sb3IiLCJfc3RhcnRfcG9zIiwiX3giLCJfeSIsIl9lbmRfcG9zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztJQUFNQSx1QixHQUVGLGlDQUFZQyxFQUFaLEVBQWdCQyxFQUFoQixFQUFvQkMsRUFBcEIsRUFBd0JDLEVBQXhCLEVBQTRCO0FBQUE7O0FBQUEsU0FPNUJDLFlBUDRCLEdBT2IsVUFBVUMsR0FBVixFQUFlQyxLQUFmLEVBQXNCO0FBQ2pDLFlBQUksS0FBS0MsV0FBTCxHQUFtQixDQUFuQixJQUF3QixPQUFPRixHQUEvQixJQUFzQ0EsT0FBTyxHQUFqRCxFQUFzRDtBQUNsRCxpQkFBS0csTUFBTCxDQUFZLEtBQUtELFdBQWpCLElBQWdDLEVBQUVFLE1BQU1KLEdBQVIsRUFBYUssUUFBUUosS0FBckIsRUFBaEM7QUFDQSxpQkFBS0MsV0FBTDtBQUNIO0FBQ0osS0FaMkI7O0FBQ3hCLFNBQUtJLFVBQUwsR0FBa0IsRUFBRUMsSUFBSVosRUFBTixFQUFVYSxJQUFJWixFQUFkLEVBQWxCO0FBQ0EsU0FBS2EsUUFBTCxHQUFnQixFQUFFRixJQUFJVixFQUFOLEVBQVVXLElBQUlWLEVBQWQsRUFBaEI7QUFDQSxTQUFLSSxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBZDtBQUNILEM7O2tCQVVVVCx1QiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZpbGxTdHlsZUxpbmVhckdyYWRpZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0X3BvcyA9IHsgX3g6IHgwLCBfeTogeTAgfTtcbiAgICAgICAgdGhpcy5fZW5kX3BvcyA9IHsgX3g6IHgxLCBfeTogeTEgfTtcbiAgICAgICAgdGhpcy5fc3RvcF9jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX3N0b3BzID0gWzAsIDAsIDAsIDAsIDBdO1xuICAgIH1cblxuICAgIGFkZENvbG9yU3RvcCA9IGZ1bmN0aW9uIChwb3MsIGNvbG9yKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9wX2NvdW50IDwgNSAmJiAwLjAgPD0gcG9zICYmIHBvcyA8PSAxLjApIHtcbiAgICAgICAgICAgIHRoaXMuX3N0b3BzW3RoaXMuX3N0b3BfY291bnRdID0geyBfcG9zOiBwb3MsIF9jb2xvcjogY29sb3IgfTtcbiAgICAgICAgICAgIHRoaXMuX3N0b3BfY291bnQrKztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsbFN0eWxlTGluZWFyR3JhZGllbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9jb250ZXh0LTJkL0ZpbGxTdHlsZUxpbmVhckdyYWRpZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FillStyleRadialGradient = function () {\n    function FillStyleRadialGradient(x0, y0, r0, x1, y1, r1) {\n        _classCallCheck(this, FillStyleRadialGradient);\n\n        this._start_pos = { _x: x0, _y: y0, _r: r0 };\n        this._end_pos = { _x: x1, _y: y1, _r: r1 };\n        this._stop_count = 0;\n        this._stops = [0, 0, 0, 0, 0];\n    }\n\n    _createClass(FillStyleRadialGradient, [{\n        key: \"addColorStop\",\n        value: function addColorStop(pos, color) {\n            if (this._stop_count < 5 && 0.0 <= pos && pos <= 1.0) {\n                this._stops[this._stop_count] = { _pos: pos, _color: color };\n                this._stop_count++;\n            }\n        }\n    }]);\n\n    return FillStyleRadialGradient;\n}();\n\nexports.default = FillStyleRadialGradient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtMmQvRmlsbFN0eWxlUmFkaWFsR3JhZGllbnQuanM/MDI2NiJdLCJuYW1lcyI6WyJGaWxsU3R5bGVSYWRpYWxHcmFkaWVudCIsIngwIiwieTAiLCJyMCIsIngxIiwieTEiLCJyMSIsIl9zdGFydF9wb3MiLCJfeCIsIl95IiwiX3IiLCJfZW5kX3BvcyIsIl9zdG9wX2NvdW50IiwiX3N0b3BzIiwicG9zIiwiY29sb3IiLCJfcG9zIiwiX2NvbG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQU1BLHVCO0FBQ0YscUNBQVlDLEVBQVosRUFBZ0JDLEVBQWhCLEVBQW9CQyxFQUFwQixFQUF3QkMsRUFBeEIsRUFBNEJDLEVBQTVCLEVBQWdDQyxFQUFoQyxFQUFvQztBQUFBOztBQUNoQyxhQUFLQyxVQUFMLEdBQWtCLEVBQUVDLElBQUlQLEVBQU4sRUFBVVEsSUFBSVAsRUFBZCxFQUFrQlEsSUFBSVAsRUFBdEIsRUFBbEI7QUFDQSxhQUFLUSxRQUFMLEdBQWdCLEVBQUVILElBQUlKLEVBQU4sRUFBVUssSUFBSUosRUFBZCxFQUFrQkssSUFBSUosRUFBdEIsRUFBaEI7QUFDQSxhQUFLTSxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBZDtBQUNIOzs7O3FDQUVZQyxHLEVBQUtDLEssRUFBTztBQUNyQixnQkFBSSxLQUFLSCxXQUFMLEdBQW1CLENBQW5CLElBQXdCLE9BQU9FLEdBQS9CLElBQXNDQSxPQUFPLEdBQWpELEVBQXNEO0FBQ2xELHFCQUFLRCxNQUFMLENBQVksS0FBS0QsV0FBakIsSUFBZ0MsRUFBRUksTUFBTUYsR0FBUixFQUFhRyxRQUFRRixLQUFyQixFQUFoQztBQUNBLHFCQUFLSCxXQUFMO0FBQ0g7QUFDSjs7Ozs7O2tCQUdVWix1QiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZpbGxTdHlsZVJhZGlhbEdyYWRpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih4MCwgeTAsIHIwLCB4MSwgeTEsIHIxKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0X3BvcyA9IHsgX3g6IHgwLCBfeTogeTAsIF9yOiByMCB9O1xuICAgICAgICB0aGlzLl9lbmRfcG9zID0geyBfeDogeDEsIF95OiB5MSwgX3I6IHIxIH07XG4gICAgICAgIHRoaXMuX3N0b3BfY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9zdG9wcyA9IFswLCAwLCAwLCAwLCAwXTtcbiAgICB9XG5cbiAgICBhZGRDb2xvclN0b3AocG9zLCBjb2xvcikge1xuICAgICAgICBpZiAodGhpcy5fc3RvcF9jb3VudCA8IDUgJiYgMC4wIDw9IHBvcyAmJiBwb3MgPD0gMS4wKSB7XG4gICAgICAgICAgICB0aGlzLl9zdG9wc1t0aGlzLl9zdG9wX2NvdW50XSA9IHsgX3BvczogcG9zLCBfY29sb3I6IGNvbG9yIH07XG4gICAgICAgICAgICB0aGlzLl9zdG9wX2NvdW50Kys7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGxTdHlsZVJhZGlhbEdyYWRpZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9zcmMvY29udGV4dC0yZC9GaWxsU3R5bGVSYWRpYWxHcmFkaWVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    \"DEPTH_BUFFER_BIT\": 256,\n    \"STENCIL_BUFFER_BIT\": 1024,\n    \"COLOR_BUFFER_BIT\": 16384,\n    \"POINTS\": 0,\n    \"LINES\": 1,\n    \"LINE_LOOP\": 2,\n    \"LINE_STRIP\": 3,\n    \"TRIANGLES\": 4,\n    \"TRIANGLE_STRIP\": 5,\n    \"TRIANGLE_FAN\": 6,\n    \"ZERO\": 0,\n    \"ONE\": 1,\n    \"SRC_COLOR\": 768,\n    \"ONE_MINUS_SRC_COLOR\": 769,\n    \"SRC_ALPHA\": 770,\n    \"ONE_MINUS_SRC_ALPHA\": 771,\n    \"DST_ALPHA\": 772,\n    \"ONE_MINUS_DST_ALPHA\": 773,\n    \"DST_COLOR\": 774,\n    \"ONE_MINUS_DST_COLOR\": 775,\n    \"SRC_ALPHA_SATURATE\": 776,\n    \"FUNC_ADD\": 32774,\n    \"BLEND_EQUATION\": 32777,\n    \"BLEND_EQUATION_RGB\": 32777,\n    \"BLEND_EQUATION_ALPHA\": 34877,\n    \"FUNC_SUBTRACT\": 32778,\n    \"FUNC_REVERSE_SUBTRACT\": 32779,\n    \"BLEND_DST_RGB\": 32968,\n    \"BLEND_SRC_RGB\": 32969,\n    \"BLEND_DST_ALPHA\": 32970,\n    \"BLEND_SRC_ALPHA\": 32971,\n    \"CONSTANT_COLOR\": 32769,\n    \"ONE_MINUS_CONSTANT_COLOR\": 32770,\n    \"CONSTANT_ALPHA\": 32771,\n    \"ONE_MINUS_CONSTANT_ALPHA\": 32772,\n    \"BLEND_COLOR\": 32773,\n    \"ARRAY_BUFFER\": 34962,\n    \"ELEMENT_ARRAY_BUFFER\": 34963,\n    \"ARRAY_BUFFER_BINDING\": 34964,\n    \"ELEMENT_ARRAY_BUFFER_BINDING\": 34965,\n    \"STREAM_DRAW\": 35040,\n    \"STATIC_DRAW\": 35044,\n    \"DYNAMIC_DRAW\": 35048,\n    \"BUFFER_SIZE\": 34660,\n    \"BUFFER_USAGE\": 34661,\n    \"CURRENT_VERTEX_ATTRIB\": 34342,\n    \"FRONT\": 1028,\n    \"BACK\": 1029,\n    \"FRONT_AND_BACK\": 1032,\n    \"TEXTURE_2D\": 3553,\n    \"CULL_FACE\": 2884,\n    \"BLEND\": 3042,\n    \"DITHER\": 3024,\n    \"STENCIL_TEST\": 2960,\n    \"DEPTH_TEST\": 2929,\n    \"SCISSOR_TEST\": 3089,\n    \"POLYGON_OFFSET_FILL\": 32823,\n    \"SAMPLE_ALPHA_TO_COVERAGE\": 32926,\n    \"SAMPLE_COVERAGE\": 32928,\n    \"NO_ERROR\": 0,\n    \"INVALID_ENUM\": 1280,\n    \"INVALID_VALUE\": 1281,\n    \"INVALID_OPERATION\": 1282,\n    \"OUT_OF_MEMORY\": 1285,\n    \"CW\": 2304,\n    \"CCW\": 2305,\n    \"LINE_WIDTH\": 2849,\n    \"ALIASED_POINT_SIZE_RANGE\": 33901,\n    \"ALIASED_LINE_WIDTH_RANGE\": 33902,\n    \"CULL_FACE_MODE\": 2885,\n    \"FRONT_FACE\": 2886,\n    \"DEPTH_RANGE\": 2928,\n    \"DEPTH_WRITEMASK\": 2930,\n    \"DEPTH_CLEAR_VALUE\": 2931,\n    \"DEPTH_FUNC\": 2932,\n    \"STENCIL_CLEAR_VALUE\": 2961,\n    \"STENCIL_FUNC\": 2962,\n    \"STENCIL_FAIL\": 2964,\n    \"STENCIL_PASS_DEPTH_FAIL\": 2965,\n    \"STENCIL_PASS_DEPTH_PASS\": 2966,\n    \"STENCIL_REF\": 2967,\n    \"STENCIL_VALUE_MASK\": 2963,\n    \"STENCIL_WRITEMASK\": 2968,\n    \"STENCIL_BACK_FUNC\": 34816,\n    \"STENCIL_BACK_FAIL\": 34817,\n    \"STENCIL_BACK_PASS_DEPTH_FAIL\": 34818,\n    \"STENCIL_BACK_PASS_DEPTH_PASS\": 34819,\n    \"STENCIL_BACK_REF\": 36003,\n    \"STENCIL_BACK_VALUE_MASK\": 36004,\n    \"STENCIL_BACK_WRITEMASK\": 36005,\n    \"VIEWPORT\": 2978,\n    \"SCISSOR_BOX\": 3088,\n    \"COLOR_CLEAR_VALUE\": 3106,\n    \"COLOR_WRITEMASK\": 3107,\n    \"UNPACK_ALIGNMENT\": 3317,\n    \"PACK_ALIGNMENT\": 3333,\n    \"MAX_TEXTURE_SIZE\": 3379,\n    \"MAX_VIEWPORT_DIMS\": 3386,\n    \"SUBPIXEL_BITS\": 3408,\n    \"RED_BITS\": 3410,\n    \"GREEN_BITS\": 3411,\n    \"BLUE_BITS\": 3412,\n    \"ALPHA_BITS\": 3413,\n    \"DEPTH_BITS\": 3414,\n    \"STENCIL_BITS\": 3415,\n    \"POLYGON_OFFSET_UNITS\": 10752,\n    \"POLYGON_OFFSET_FACTOR\": 32824,\n    \"TEXTURE_BINDING_2D\": 32873,\n    \"SAMPLE_BUFFERS\": 32936,\n    \"SAMPLES\": 32937,\n    \"SAMPLE_COVERAGE_VALUE\": 32938,\n    \"SAMPLE_COVERAGE_INVERT\": 32939,\n    \"COMPRESSED_TEXTURE_FORMATS\": 34467,\n    \"DONT_CARE\": 4352,\n    \"FASTEST\": 4353,\n    \"NICEST\": 4354,\n    \"GENERATE_MIPMAP_HINT\": 33170,\n    \"BYTE\": 5120,\n    \"UNSIGNED_BYTE\": 5121,\n    \"SHORT\": 5122,\n    \"UNSIGNED_SHORT\": 5123,\n    \"INT\": 5124,\n    \"UNSIGNED_INT\": 5125,\n    \"FLOAT\": 5126,\n    \"DEPTH_COMPONENT\": 6402,\n    \"ALPHA\": 6406,\n    \"RGB\": 6407,\n    \"RGBA\": 6408,\n    \"LUMINANCE\": 6409,\n    \"LUMINANCE_ALPHA\": 6410,\n    \"UNSIGNED_SHORT_4_4_4_4\": 32819,\n    \"UNSIGNED_SHORT_5_5_5_1\": 32820,\n    \"UNSIGNED_SHORT_5_6_5\": 33635,\n    \"FRAGMENT_SHADER\": 35632,\n    \"VERTEX_SHADER\": 35633,\n    \"MAX_VERTEX_ATTRIBS\": 34921,\n    \"MAX_VERTEX_UNIFORM_VECTORS\": 36347,\n    \"MAX_VARYING_VECTORS\": 36348,\n    \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\": 35661,\n    \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\": 35660,\n    \"MAX_TEXTURE_IMAGE_UNITS\": 34930,\n    \"MAX_FRAGMENT_UNIFORM_VECTORS\": 36349,\n    \"SHADER_TYPE\": 35663,\n    \"DELETE_STATUS\": 35712,\n    \"LINK_STATUS\": 35714,\n    \"VALIDATE_STATUS\": 35715,\n    \"ATTACHED_SHADERS\": 35717,\n    \"ACTIVE_UNIFORMS\": 35718,\n    \"ACTIVE_ATTRIBUTES\": 35721,\n    \"SHADING_LANGUAGE_VERSION\": 35724,\n    \"CURRENT_PROGRAM\": 35725,\n    \"NEVER\": 512,\n    \"LESS\": 513,\n    \"EQUAL\": 514,\n    \"LEQUAL\": 515,\n    \"GREATER\": 516,\n    \"NOTEQUAL\": 517,\n    \"GEQUAL\": 518,\n    \"ALWAYS\": 519,\n    \"KEEP\": 7680,\n    \"REPLACE\": 7681,\n    \"INCR\": 7682,\n    \"DECR\": 7683,\n    \"INVERT\": 5386,\n    \"INCR_WRAP\": 34055,\n    \"DECR_WRAP\": 34056,\n    \"VENDOR\": 7936,\n    \"RENDERER\": 7937,\n    \"VERSION\": 7938,\n    \"NEAREST\": 9728,\n    \"LINEAR\": 9729,\n    \"NEAREST_MIPMAP_NEAREST\": 9984,\n    \"LINEAR_MIPMAP_NEAREST\": 9985,\n    \"NEAREST_MIPMAP_LINEAR\": 9986,\n    \"LINEAR_MIPMAP_LINEAR\": 9987,\n    \"TEXTURE_MAG_FILTER\": 10240,\n    \"TEXTURE_MIN_FILTER\": 10241,\n    \"TEXTURE_WRAP_S\": 10242,\n    \"TEXTURE_WRAP_T\": 10243,\n    \"TEXTURE\": 5890,\n    \"TEXTURE_CUBE_MAP\": 34067,\n    \"TEXTURE_BINDING_CUBE_MAP\": 34068,\n    \"TEXTURE_CUBE_MAP_POSITIVE_X\": 34069,\n    \"TEXTURE_CUBE_MAP_NEGATIVE_X\": 34070,\n    \"TEXTURE_CUBE_MAP_POSITIVE_Y\": 34071,\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Y\": 34072,\n    \"TEXTURE_CUBE_MAP_POSITIVE_Z\": 34073,\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Z\": 34074,\n    \"MAX_CUBE_MAP_TEXTURE_SIZE\": 34076,\n    \"TEXTURE0\": 33984,\n    \"TEXTURE1\": 33985,\n    \"TEXTURE2\": 33986,\n    \"TEXTURE3\": 33987,\n    \"TEXTURE4\": 33988,\n    \"TEXTURE5\": 33989,\n    \"TEXTURE6\": 33990,\n    \"TEXTURE7\": 33991,\n    \"TEXTURE8\": 33992,\n    \"TEXTURE9\": 33993,\n    \"TEXTURE10\": 33994,\n    \"TEXTURE11\": 33995,\n    \"TEXTURE12\": 33996,\n    \"TEXTURE13\": 33997,\n    \"TEXTURE14\": 33998,\n    \"TEXTURE15\": 33999,\n    \"TEXTURE16\": 34000,\n    \"TEXTURE17\": 34001,\n    \"TEXTURE18\": 34002,\n    \"TEXTURE19\": 34003,\n    \"TEXTURE20\": 34004,\n    \"TEXTURE21\": 34005,\n    \"TEXTURE22\": 34006,\n    \"TEXTURE23\": 34007,\n    \"TEXTURE24\": 34008,\n    \"TEXTURE25\": 34009,\n    \"TEXTURE26\": 34010,\n    \"TEXTURE27\": 34011,\n    \"TEXTURE28\": 34012,\n    \"TEXTURE29\": 34013,\n    \"TEXTURE30\": 34014,\n    \"TEXTURE31\": 34015,\n    \"ACTIVE_TEXTURE\": 34016,\n    \"REPEAT\": 10497,\n    \"CLAMP_TO_EDGE\": 33071,\n    \"MIRRORED_REPEAT\": 33648,\n    \"FLOAT_VEC2\": 35664,\n    \"FLOAT_VEC3\": 35665,\n    \"FLOAT_VEC4\": 35666,\n    \"INT_VEC2\": 35667,\n    \"INT_VEC3\": 35668,\n    \"INT_VEC4\": 35669,\n    \"BOOL\": 35670,\n    \"BOOL_VEC2\": 35671,\n    \"BOOL_VEC3\": 35672,\n    \"BOOL_VEC4\": 35673,\n    \"FLOAT_MAT2\": 35674,\n    \"FLOAT_MAT3\": 35675,\n    \"FLOAT_MAT4\": 35676,\n    \"SAMPLER_2D\": 35678,\n    \"SAMPLER_CUBE\": 35680,\n    \"VERTEX_ATTRIB_ARRAY_ENABLED\": 34338,\n    \"VERTEX_ATTRIB_ARRAY_SIZE\": 34339,\n    \"VERTEX_ATTRIB_ARRAY_STRIDE\": 34340,\n    \"VERTEX_ATTRIB_ARRAY_TYPE\": 34341,\n    \"VERTEX_ATTRIB_ARRAY_NORMALIZED\": 34922,\n    \"VERTEX_ATTRIB_ARRAY_POINTER\": 34373,\n    \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\": 34975,\n    \"IMPLEMENTATION_COLOR_READ_TYPE\": 35738,\n    \"IMPLEMENTATION_COLOR_READ_FORMAT\": 35739,\n    \"COMPILE_STATUS\": 35713,\n    \"LOW_FLOAT\": 36336,\n    \"MEDIUM_FLOAT\": 36337,\n    \"HIGH_FLOAT\": 36338,\n    \"LOW_INT\": 36339,\n    \"MEDIUM_INT\": 36340,\n    \"HIGH_INT\": 36341,\n    \"FRAMEBUFFER\": 36160,\n    \"RENDERBUFFER\": 36161,\n    \"RGBA4\": 32854,\n    \"RGB5_A1\": 32855,\n    \"RGB565\": 36194,\n    \"DEPTH_COMPONENT16\": 33189,\n    \"STENCIL_INDEX8\": 36168,\n    \"DEPTH_STENCIL\": 34041,\n    \"RENDERBUFFER_WIDTH\": 36162,\n    \"RENDERBUFFER_HEIGHT\": 36163,\n    \"RENDERBUFFER_INTERNAL_FORMAT\": 36164,\n    \"RENDERBUFFER_RED_SIZE\": 36176,\n    \"RENDERBUFFER_GREEN_SIZE\": 36177,\n    \"RENDERBUFFER_BLUE_SIZE\": 36178,\n    \"RENDERBUFFER_ALPHA_SIZE\": 36179,\n    \"RENDERBUFFER_DEPTH_SIZE\": 36180,\n    \"RENDERBUFFER_STENCIL_SIZE\": 36181,\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\": 36048,\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\": 36049,\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\": 36050,\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\": 36051,\n    \"COLOR_ATTACHMENT0\": 36064,\n    \"DEPTH_ATTACHMENT\": 36096,\n    \"STENCIL_ATTACHMENT\": 36128,\n    \"DEPTH_STENCIL_ATTACHMENT\": 33306,\n    \"NONE\": 0,\n    \"FRAMEBUFFER_COMPLETE\": 36053,\n    \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\": 36054,\n    \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\": 36055,\n    \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\": 36057,\n    \"FRAMEBUFFER_UNSUPPORTED\": 36061,\n    \"FRAMEBUFFER_BINDING\": 36006,\n    \"RENDERBUFFER_BINDING\": 36007,\n    \"MAX_RENDERBUFFER_SIZE\": 34024,\n    \"INVALID_FRAMEBUFFER_OPERATION\": 1286,\n    \"UNPACK_FLIP_Y_WEBGL\": 37440,\n    \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\": 37441,\n    \"CONTEXT_LOST_WEBGL\": 37442,\n    \"UNPACK_COLORSPACE_CONVERSION_WEBGL\": 37443,\n    \"BROWSER_DEFAULT_WEBGL\": 37444\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WebGLActiveInfo = function WebGLActiveInfo(_ref) {\n    var type = _ref.type,\n        name = _ref.name,\n        size = _ref.size;\n\n    _classCallCheck(this, WebGLActiveInfo);\n\n    this.className = 'WebGLActiveInfo';\n\n    this.type = type;\n    this.name = name;\n    this.size = size;\n};\n\nexports.default = WebGLActiveInfo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvQWN0aXZlSW5mby5qcz82NzExIl0sIm5hbWVzIjpbIldlYkdMQWN0aXZlSW5mbyIsInR5cGUiLCJuYW1lIiwic2l6ZSIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7SUFBcUJBLGUsR0FHakIsK0JBRUc7QUFBQSxRQURDQyxJQUNELFFBRENBLElBQ0Q7QUFBQSxRQURPQyxJQUNQLFFBRE9BLElBQ1A7QUFBQSxRQURhQyxJQUNiLFFBRGFBLElBQ2I7O0FBQUE7O0FBQUEsU0FKSEMsU0FJRyxHQUpTLGlCQUlUOztBQUNDLFNBQUtILElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNILEM7O2tCQVRnQkgsZSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMQWN0aXZlSW5mbyB7XG4gICAgY2xhc3NOYW1lID0gJ1dlYkdMQWN0aXZlSW5mbyc7XG5cbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIHR5cGUsIG5hbWUsIHNpemVcbiAgICB9KSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9zcmMvY29udGV4dC13ZWJnbC9BY3RpdmVJbmZvLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLBuffer';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLBuffer = function () {\n    function WebGLBuffer(id) {\n        _classCallCheck(this, WebGLBuffer);\n\n        this.className = name;\n\n        this.id = id;\n    }\n\n    _createClass(WebGLBuffer, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLBuffer;\n}();\n\nWebGLBuffer.uuid = _uuid;\nexports.default = WebGLBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvQnVmZmVyLmpzP2FmZTIiXSwibmFtZXMiOlsibmFtZSIsInV1aWQiLCJpZCIsIldlYkdMQnVmZmVyIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsT0FBTyxhQUFiOztBQUVBLFNBQVNDLEtBQVQsQ0FBY0MsRUFBZCxFQUFrQjtBQUNkLFdBQU8seUNBQXdCRixJQUF4QixFQUE4QkUsRUFBOUIsQ0FBUDtBQUNIOztJQUVvQkMsVztBQUdqQix5QkFBWUQsRUFBWixFQUFnQjtBQUFBOztBQUFBLGFBRmhCRSxTQUVnQixHQUZKSixJQUVJOztBQUNaLGFBQUtFLEVBQUwsR0FBVUEsRUFBVjtBQUNIOzs7OytCQUlNO0FBQ0gsbUJBQU9ELE1BQUssS0FBS0MsRUFBVixDQUFQO0FBQ0g7Ozs7OztBQVhnQkMsVyxDQU9WRixJLEdBQU9BLEs7a0JBUEdFLFciLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFRyYW5zZmVyZWRPYmplY3RVVUlEfSBmcm9tICcuL2NsYXNzVXRpbHMnO1xuXG5jb25zdCBuYW1lID0gJ1dlYkdMQnVmZmVyJztcblxuZnVuY3Rpb24gdXVpZChpZCkge1xuICAgIHJldHVybiBnZXRUcmFuc2ZlcmVkT2JqZWN0VVVJRChuYW1lLCBpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMQnVmZmVyIHtcbiAgICBjbGFzc05hbWUgPSBuYW1lO1xuXG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgIH1cblxuICAgIHN0YXRpYyB1dWlkID0gdXVpZDtcblxuICAgIHV1aWQoKSB7XG4gICAgICAgIHJldHVybiB1dWlkKHRoaXMuaWQpO1xuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vc3JjL2NvbnRleHQtd2ViZ2wvQnVmZmVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLFrameBuffer';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLFramebuffer = function () {\n    function WebGLFramebuffer(id) {\n        _classCallCheck(this, WebGLFramebuffer);\n\n        this.className = name;\n\n        this.id = id;\n    }\n\n    _createClass(WebGLFramebuffer, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLFramebuffer;\n}();\n\nWebGLFramebuffer.uuid = _uuid;\nexports.default = WebGLFramebuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvRnJhbWVidWZmZXIuanM/Mzc5ZSJdLCJuYW1lcyI6WyJuYW1lIiwidXVpZCIsImlkIiwiV2ViR0xGcmFtZWJ1ZmZlciIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLE9BQU8sa0JBQWI7O0FBRUEsU0FBU0MsS0FBVCxDQUFjQyxFQUFkLEVBQWtCO0FBQ2QsV0FBTyx5Q0FBd0JGLElBQXhCLEVBQThCRSxFQUE5QixDQUFQO0FBQ0g7O0lBRW9CQyxnQjtBQUdqQiw4QkFBWUQsRUFBWixFQUFnQjtBQUFBOztBQUFBLGFBRmhCRSxTQUVnQixHQUZKSixJQUVJOztBQUNaLGFBQUtFLEVBQUwsR0FBVUEsRUFBVjtBQUNIOzs7OytCQUlNO0FBQ0gsbUJBQU9ELE1BQUssS0FBS0MsRUFBVixDQUFQO0FBQ0g7Ozs7OztBQVhnQkMsZ0IsQ0FPVkYsSSxHQUFPQSxLO2tCQVBHRSxnQiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0VHJhbnNmZXJlZE9iamVjdFVVSUR9IGZyb20gJy4vY2xhc3NVdGlscyc7XG5cbmNvbnN0IG5hbWUgPSAnV2ViR0xGcmFtZUJ1ZmZlcic7XG5cbmZ1bmN0aW9uIHV1aWQoaWQpIHtcbiAgICByZXR1cm4gZ2V0VHJhbnNmZXJlZE9iamVjdFVVSUQobmFtZSwgaWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJHTEZyYW1lYnVmZmVyIHtcbiAgICBjbGFzc05hbWUgPSBuYW1lO1xuXG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgIH1cblxuICAgIHN0YXRpYyB1dWlkID0gdXVpZDtcblxuICAgIHV1aWQoKSB7XG4gICAgICAgIHJldHVybiB1dWlkKHRoaXMuaWQpO1xuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vc3JjL2NvbnRleHQtd2ViZ2wvRnJhbWVidWZmZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLRenderBuffer';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLRenderbuffer = function () {\n    function WebGLRenderbuffer(id) {\n        _classCallCheck(this, WebGLRenderbuffer);\n\n        this.className = name;\n\n        this.id = id;\n    }\n\n    _createClass(WebGLRenderbuffer, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLRenderbuffer;\n}();\n\nWebGLRenderbuffer.uuid = _uuid;\nexports.default = WebGLRenderbuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvUmVuZGVyYnVmZmVyLmpzPzljZDQiXSwibmFtZXMiOlsibmFtZSIsInV1aWQiLCJpZCIsIldlYkdMUmVuZGVyYnVmZmVyIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsT0FBTyxtQkFBYjs7QUFFQSxTQUFTQyxLQUFULENBQWNDLEVBQWQsRUFBa0I7QUFDZCxXQUFPLHlDQUF3QkYsSUFBeEIsRUFBOEJFLEVBQTlCLENBQVA7QUFDSDs7SUFFb0JDLGlCO0FBR2pCLCtCQUFZRCxFQUFaLEVBQWdCO0FBQUE7O0FBQUEsYUFGaEJFLFNBRWdCLEdBRkpKLElBRUk7O0FBQ1osYUFBS0UsRUFBTCxHQUFVQSxFQUFWO0FBQ0g7Ozs7K0JBSU07QUFDSCxtQkFBT0QsTUFBSyxLQUFLQyxFQUFWLENBQVA7QUFDSDs7Ozs7O0FBWGdCQyxpQixDQU9WRixJLEdBQU9BLEs7a0JBUEdFLGlCIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtnZXRUcmFuc2ZlcmVkT2JqZWN0VVVJRH0gZnJvbSAnLi9jbGFzc1V0aWxzJztcblxuY29uc3QgbmFtZSA9ICdXZWJHTFJlbmRlckJ1ZmZlcic7XG5cbmZ1bmN0aW9uIHV1aWQoaWQpIHtcbiAgICByZXR1cm4gZ2V0VHJhbnNmZXJlZE9iamVjdFVVSUQobmFtZSwgaWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJHTFJlbmRlcmJ1ZmZlciB7XG4gICAgY2xhc3NOYW1lID0gbmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXVpZCA9IHV1aWQ7XG5cbiAgICB1dWlkKCkge1xuICAgICAgICByZXR1cm4gdXVpZCh0aGlzLmlkKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9jb250ZXh0LXdlYmdsL1JlbmRlcmJ1ZmZlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLTexture';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLTexture = function () {\n    function WebGLTexture(id, type) {\n        _classCallCheck(this, WebGLTexture);\n\n        this.className = name;\n\n        this.id = id;\n        this.type = type;\n    }\n\n    _createClass(WebGLTexture, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLTexture;\n}();\n\nWebGLTexture.uuid = _uuid;\nexports.default = WebGLTexture;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvVGV4dHVyZS5qcz8yZWJhIl0sIm5hbWVzIjpbIm5hbWUiLCJ1dWlkIiwiaWQiLCJXZWJHTFRleHR1cmUiLCJ0eXBlIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsT0FBTyxjQUFiOztBQUVBLFNBQVNDLEtBQVQsQ0FBY0MsRUFBZCxFQUFrQjtBQUNkLFdBQU8seUNBQXdCRixJQUF4QixFQUE4QkUsRUFBOUIsQ0FBUDtBQUNIOztJQUVvQkMsWTtBQUdqQiwwQkFBWUQsRUFBWixFQUFnQkUsSUFBaEIsRUFBc0I7QUFBQTs7QUFBQSxhQUZ0QkMsU0FFc0IsR0FGVkwsSUFFVTs7QUFDbEIsYUFBS0UsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsYUFBS0UsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7Ozs7K0JBSU07QUFDSCxtQkFBT0gsTUFBSyxLQUFLQyxFQUFWLENBQVA7QUFDSDs7Ozs7O0FBWmdCQyxZLENBUVZGLEksR0FBT0EsSztrQkFSR0UsWSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0VHJhbnNmZXJlZE9iamVjdFVVSUR9IGZyb20gJy4vY2xhc3NVdGlscyc7XG5cbmNvbnN0IG5hbWUgPSAnV2ViR0xUZXh0dXJlJztcblxuZnVuY3Rpb24gdXVpZChpZCkge1xuICAgIHJldHVybiBnZXRUcmFuc2ZlcmVkT2JqZWN0VVVJRChuYW1lLCBpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMVGV4dHVyZSB7XG4gICAgY2xhc3NOYW1lID0gbmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXVpZCA9IHV1aWQ7XG5cbiAgICB1dWlkKCkge1xuICAgICAgICByZXR1cm4gdXVpZCh0aGlzLmlkKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9jb250ZXh0LXdlYmdsL1RleHR1cmUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLProgram';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLProgram = function () {\n    function WebGLProgram(id) {\n        _classCallCheck(this, WebGLProgram);\n\n        this.className = name;\n\n        this.id = id;\n    }\n\n    _createClass(WebGLProgram, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLProgram;\n}();\n\nWebGLProgram.uuid = _uuid;\nexports.default = WebGLProgram;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvUHJvZ3JhbS5qcz9hMTIxIl0sIm5hbWVzIjpbIm5hbWUiLCJ1dWlkIiwiaWQiLCJXZWJHTFByb2dyYW0iLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFQSxJQUFNQSxPQUFPLGNBQWI7O0FBRUEsU0FBU0MsS0FBVCxDQUFjQyxFQUFkLEVBQWtCO0FBQ2QsV0FBTyx5Q0FBd0JGLElBQXhCLEVBQThCRSxFQUE5QixDQUFQO0FBQ0g7O0lBRW9CQyxZO0FBR2pCLDBCQUFZRCxFQUFaLEVBQWdCO0FBQUE7O0FBQUEsYUFGaEJFLFNBRWdCLEdBRkpKLElBRUk7O0FBQ1osYUFBS0UsRUFBTCxHQUFVQSxFQUFWO0FBQ0g7Ozs7K0JBSU07QUFDSCxtQkFBT0QsTUFBSyxLQUFLQyxFQUFWLENBQVA7QUFDSDs7Ozs7O0FBWGdCQyxZLENBT1ZGLEksR0FBT0EsSztrQkFQR0UsWSIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0VHJhbnNmZXJlZE9iamVjdFVVSUR9IGZyb20gJy4vY2xhc3NVdGlscyc7XG5cbmNvbnN0IG5hbWUgPSAnV2ViR0xQcm9ncmFtJztcblxuZnVuY3Rpb24gdXVpZChpZCkge1xuICAgIHJldHVybiBnZXRUcmFuc2ZlcmVkT2JqZWN0VVVJRChuYW1lLCBpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMUHJvZ3JhbSB7XG4gICAgY2xhc3NOYW1lID0gbmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXVpZCA9IHV1aWQ7XG5cbiAgICB1dWlkKCkge1xuICAgICAgICByZXR1cm4gdXVpZCh0aGlzLmlkKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9jb250ZXh0LXdlYmdsL1Byb2dyYW0uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLShader';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLShader = function () {\n    function WebGLShader(id, type) {\n        _classCallCheck(this, WebGLShader);\n\n        this.className = name;\n\n        this.id = id;\n        this.type = type;\n    }\n\n    _createClass(WebGLShader, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLShader;\n}();\n\nWebGLShader.uuid = _uuid;\nexports.default = WebGLShader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvU2hhZGVyLmpzPzM0MmMiXSwibmFtZXMiOlsibmFtZSIsInV1aWQiLCJpZCIsIldlYkdMU2hhZGVyIiwidHlwZSIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLE9BQU8sYUFBYjs7QUFFQSxTQUFTQyxLQUFULENBQWNDLEVBQWQsRUFBa0I7QUFDZCxXQUFPLHlDQUF3QkYsSUFBeEIsRUFBOEJFLEVBQTlCLENBQVA7QUFDSDs7SUFFb0JDLFc7QUFHakIseUJBQVlELEVBQVosRUFBZ0JFLElBQWhCLEVBQXNCO0FBQUE7O0FBQUEsYUFGdEJDLFNBRXNCLEdBRlZMLElBRVU7O0FBQ2xCLGFBQUtFLEVBQUwsR0FBVUEsRUFBVjtBQUNBLGFBQUtFLElBQUwsR0FBWUEsSUFBWjtBQUNIOzs7OytCQUlNO0FBQ0gsbUJBQU9ILE1BQUssS0FBS0MsRUFBVixDQUFQO0FBQ0g7Ozs7OztBQVpnQkMsVyxDQVFWRixJLEdBQU9BLEs7a0JBUkdFLFciLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFRyYW5zZmVyZWRPYmplY3RVVUlEfSBmcm9tICcuL2NsYXNzVXRpbHMnO1xuXG5jb25zdCBuYW1lID0gJ1dlYkdMU2hhZGVyJztcblxuZnVuY3Rpb24gdXVpZChpZCkge1xuICAgIHJldHVybiBnZXRUcmFuc2ZlcmVkT2JqZWN0VVVJRChuYW1lLCBpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdMU2hhZGVyIHtcbiAgICBjbGFzc05hbWUgPSBuYW1lO1xuXG4gICAgY29uc3RydWN0b3IoaWQsIHR5cGUpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cblxuICAgIHN0YXRpYyB1dWlkID0gdXVpZDtcblxuICAgIHV1aWQoKSB7XG4gICAgICAgIHJldHVybiB1dWlkKHRoaXMuaWQpO1xuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vc3JjL2NvbnRleHQtd2ViZ2wvU2hhZGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar WebGLShaderPrecisionFormat = function WebGLShaderPrecisionFormat(_ref) {\n    var rangeMin = _ref.rangeMin,\n        rangeMax = _ref.rangeMax,\n        precision = _ref.precision;\n\n    _classCallCheck(this, WebGLShaderPrecisionFormat);\n\n    this.className = 'WebGLShaderPrecisionFormat';\n\n    this.rangeMin = rangeMin;\n    this.rangeMax = rangeMax;\n    this.precision = precision;\n};\n\nexports.default = WebGLShaderPrecisionFormat;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvU2hhZGVyUHJlY2lzaW9uRm9ybWF0LmpzP2RhZTUiXSwibmFtZXMiOlsiV2ViR0xTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJyYW5nZU1pbiIsInJhbmdlTWF4IiwicHJlY2lzaW9uIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztJQUFxQkEsMEIsR0FHakIsMENBRUc7QUFBQSxRQURDQyxRQUNELFFBRENBLFFBQ0Q7QUFBQSxRQURXQyxRQUNYLFFBRFdBLFFBQ1g7QUFBQSxRQURxQkMsU0FDckIsUUFEcUJBLFNBQ3JCOztBQUFBOztBQUFBLFNBSkhDLFNBSUcsR0FKUyw0QkFJVDs7QUFDQyxTQUFLSCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFDSCxDOztrQkFUZ0JILDBCIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViR0xTaGFkZXJQcmVjaXNpb25Gb3JtYXQge1xuICAgIGNsYXNzTmFtZSA9ICdXZWJHTFNoYWRlclByZWNpc2lvbkZvcm1hdCc7XG5cbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIHJhbmdlTWluLCByYW5nZU1heCwgcHJlY2lzaW9uXG4gICAgfSkge1xuICAgICAgICB0aGlzLnJhbmdlTWluID0gcmFuZ2VNaW47XG4gICAgICAgIHRoaXMucmFuZ2VNYXggPSByYW5nZU1heDtcbiAgICAgICAgdGhpcy5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9zcmMvY29udGV4dC13ZWJnbC9TaGFkZXJQcmVjaXNpb25Gb3JtYXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classUtils = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar name = 'WebGLUniformLocation';\n\nfunction _uuid(id) {\n    return (0, _classUtils.getTransferedObjectUUID)(name, id);\n}\n\nvar WebGLUniformLocation = function () {\n    function WebGLUniformLocation(id, type) {\n        _classCallCheck(this, WebGLUniformLocation);\n\n        this.className = name;\n\n        this.id = id;\n        this.type = type;\n    }\n\n    _createClass(WebGLUniformLocation, [{\n        key: 'uuid',\n        value: function uuid() {\n            return _uuid(this.id);\n        }\n    }]);\n\n    return WebGLUniformLocation;\n}();\n\nWebGLUniformLocation.uuid = _uuid;\nexports.default = WebGLUniformLocation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQtd2ViZ2wvVW5pZm9ybUxvY2F0aW9uLmpzPzJlMjgiXSwibmFtZXMiOlsibmFtZSIsInV1aWQiLCJpZCIsIldlYkdMVW5pZm9ybUxvY2F0aW9uIiwidHlwZSIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLE9BQU8sc0JBQWI7O0FBRUEsU0FBU0MsS0FBVCxDQUFjQyxFQUFkLEVBQWtCO0FBQ2QsV0FBTyx5Q0FBd0JGLElBQXhCLEVBQThCRSxFQUE5QixDQUFQO0FBQ0g7O0lBRW9CQyxvQjtBQUdqQixrQ0FBWUQsRUFBWixFQUFnQkUsSUFBaEIsRUFBc0I7QUFBQTs7QUFBQSxhQUZ0QkMsU0FFc0IsR0FGVkwsSUFFVTs7QUFDbEIsYUFBS0UsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsYUFBS0UsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7Ozs7K0JBSU07QUFDSCxtQkFBT0gsTUFBSyxLQUFLQyxFQUFWLENBQVA7QUFDSDs7Ozs7O0FBWmdCQyxvQixDQVFWRixJLEdBQU9BLEs7a0JBUkdFLG9CIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtnZXRUcmFuc2ZlcmVkT2JqZWN0VVVJRH0gZnJvbSAnLi9jbGFzc1V0aWxzJztcblxuY29uc3QgbmFtZSA9ICdXZWJHTFVuaWZvcm1Mb2NhdGlvbic7XG5cbmZ1bmN0aW9uIHV1aWQoaWQpIHtcbiAgICByZXR1cm4gZ2V0VHJhbnNmZXJlZE9iamVjdFVVSUQobmFtZSwgaWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJHTFVuaWZvcm1Mb2NhdGlvbiB7XG4gICAgY2xhc3NOYW1lID0gbmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXVpZCA9IHV1aWQ7XG5cbiAgICB1dWlkKCkge1xuICAgICAgICByZXR1cm4gdXVpZCh0aGlzLmlkKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9jb250ZXh0LXdlYmdsL1VuaWZvcm1Mb2NhdGlvbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar incId = 1;\n\nvar noop = function noop() {};\n\nvar GImage = function () {\n    function GImage() {\n        _classCallCheck(this, GImage);\n\n        this._id = incId++;\n        this._width = 0;\n        this._height = 0;\n        this._src = undefined;\n        this._onload = noop;\n        this._onerror = noop;\n        this.complete = false;\n    }\n\n    _createClass(GImage, [{\n        key: 'addEventListener',\n        value: function addEventListener(name, listener) {\n            if (name === 'load') {\n                this.onload = listener;\n            } else if (name === 'error') {\n                this.onerror = listener;\n            }\n        }\n    }, {\n        key: 'removeEventListener',\n        value: function removeEventListener(name, listener) {\n            if (name === 'load') {\n                this.onload = noop;\n            } else if (name === 'error') {\n                this.onerror = noop;\n            }\n        }\n    }, {\n        key: 'width',\n        get: function get() {\n            return this._width;\n        },\n        set: function set(v) {\n            this._width = v;\n        }\n    }, {\n        key: 'height',\n        get: function get() {\n            return this._height;\n        },\n        set: function set(v) {\n            this._height = v;\n        }\n    }, {\n        key: 'src',\n        get: function get() {\n            return this._src;\n        },\n        set: function set(v) {\n            var _this = this;\n\n            if (v.startsWith('//')) {\n                v = 'http:' + v;\n            }\n\n            this._src = v;\n\n            GImage.GBridge.perloadImage([this._src, this._id], function (data) {\n                if (typeof data === 'string') {\n                    data = JSON.parse(data);\n                }\n                if (data.error) {\n                    var evt = { type: 'error', target: _this };\n                    _this.onerror(evt);\n                } else {\n                    _this.complete = true;\n                    _this.width = typeof data.width === 'number' ? data.width : 0;\n                    _this.height = typeof data.height === 'number' ? data.height : 0;\n                    var evt = { type: 'load', target: _this };\n                    _this.onload(evt);\n                }\n            });\n        }\n    }, {\n        key: 'onload',\n        get: function get() {\n            return this._onload;\n        },\n        set: function set(v) {\n            this._onload = v;\n        }\n    }, {\n        key: 'onerror',\n        get: function get() {\n            return this._onerror;\n        },\n        set: function set(v) {\n            this._onerror = v;\n        }\n    }]);\n\n    return GImage;\n}();\n\nGImage.GBridge = null;\nexports.default = GImage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2Vudi9pbWFnZS5qcz80Nzg4Il0sIm5hbWVzIjpbImluY0lkIiwibm9vcCIsIkdJbWFnZSIsIl9pZCIsIl93aWR0aCIsIl9oZWlnaHQiLCJfc3JjIiwidW5kZWZpbmVkIiwiX29ubG9hZCIsIl9vbmVycm9yIiwiY29tcGxldGUiLCJuYW1lIiwibGlzdGVuZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwidiIsInN0YXJ0c1dpdGgiLCJHQnJpZGdlIiwicGVybG9hZEltYWdlIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiZXZ0IiwidHlwZSIsInRhcmdldCIsIndpZHRoIiwiaGVpZ2h0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSUEsUUFBUSxDQUFaOztBQUVBLElBQU1DLE9BQU8sU0FBUEEsSUFBTyxHQUFZLENBQUcsQ0FBNUI7O0lBRU1DLE07QUFJRixzQkFBYztBQUFBOztBQUNWLGFBQUtDLEdBQUwsR0FBV0gsT0FBWDtBQUNBLGFBQUtJLE1BQUwsR0FBYyxDQUFkO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLENBQWY7QUFDQSxhQUFLQyxJQUFMLEdBQVlDLFNBQVo7QUFDQSxhQUFLQyxPQUFMLEdBQWVQLElBQWY7QUFDQSxhQUFLUSxRQUFMLEdBQWdCUixJQUFoQjtBQUNBLGFBQUtTLFFBQUwsR0FBZ0IsS0FBaEI7QUFDSDs7Ozt5Q0E4Q2dCQyxJLEVBQU1DLFEsRUFBVTtBQUM3QixnQkFBSUQsU0FBUyxNQUFiLEVBQXFCO0FBQ2pCLHFCQUFLRSxNQUFMLEdBQWNELFFBQWQ7QUFDSCxhQUZELE1BRU8sSUFBSUQsU0FBUyxPQUFiLEVBQXNCO0FBQ3pCLHFCQUFLRyxPQUFMLEdBQWVGLFFBQWY7QUFDSDtBQUNKOzs7NENBRW1CRCxJLEVBQU1DLFEsRUFBVTtBQUNoQyxnQkFBSUQsU0FBUyxNQUFiLEVBQXFCO0FBQ2pCLHFCQUFLRSxNQUFMLEdBQWNaLElBQWQ7QUFDSCxhQUZELE1BRU8sSUFBSVUsU0FBUyxPQUFiLEVBQXNCO0FBQ3pCLHFCQUFLRyxPQUFMLEdBQWViLElBQWY7QUFDSDtBQUNKOzs7NEJBMURXO0FBQ1IsbUJBQU8sS0FBS0csTUFBWjtBQUNILFM7MEJBQ1NXLEMsRUFBRztBQUNULGlCQUFLWCxNQUFMLEdBQWNXLENBQWQ7QUFDSDs7OzRCQUVZO0FBQ1QsbUJBQU8sS0FBS1YsT0FBWjtBQUNILFM7MEJBRVVVLEMsRUFBRztBQUNWLGlCQUFLVixPQUFMLEdBQWVVLENBQWY7QUFDSDs7OzRCQUVTO0FBQ04sbUJBQU8sS0FBS1QsSUFBWjtBQUNILFM7MEJBRU9TLEMsRUFBRztBQUFBOztBQUVQLGdCQUFJQSxFQUFFQyxVQUFGLENBQWEsSUFBYixDQUFKLEVBQXdCO0FBQ3BCRCxvQkFBSSxVQUFVQSxDQUFkO0FBQ0g7O0FBRUQsaUJBQUtULElBQUwsR0FBWVMsQ0FBWjs7QUFFQWIsbUJBQU9lLE9BQVAsQ0FBZUMsWUFBZixDQUE0QixDQUFDLEtBQUtaLElBQU4sRUFBWSxLQUFLSCxHQUFqQixDQUE1QixFQUFtRCxVQUFDZ0IsSUFBRCxFQUFVO0FBQ3pELG9CQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDMUJBLDJCQUFPQyxLQUFLQyxLQUFMLENBQVdGLElBQVgsQ0FBUDtBQUNIO0FBQ0Qsb0JBQUlBLEtBQUtHLEtBQVQsRUFBZ0I7QUFDWix3QkFBSUMsTUFBTSxFQUFFQyxNQUFNLE9BQVIsRUFBaUJDLFFBQVEsS0FBekIsRUFBVjtBQUNBLDBCQUFLWCxPQUFMLENBQWFTLEdBQWI7QUFDSCxpQkFIRCxNQUdPO0FBQ0gsMEJBQUtiLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSwwQkFBS2dCLEtBQUwsR0FBYSxPQUFPUCxLQUFLTyxLQUFaLEtBQXNCLFFBQXRCLEdBQWlDUCxLQUFLTyxLQUF0QyxHQUE4QyxDQUEzRDtBQUNBLDBCQUFLQyxNQUFMLEdBQWMsT0FBT1IsS0FBS1EsTUFBWixLQUF1QixRQUF2QixHQUFrQ1IsS0FBS1EsTUFBdkMsR0FBZ0QsQ0FBOUQ7QUFDQSx3QkFBSUosTUFBTSxFQUFFQyxNQUFNLE1BQVIsRUFBZ0JDLFFBQVEsS0FBeEIsRUFBVjtBQUNBLDBCQUFLWixNQUFMLENBQVlVLEdBQVo7QUFDSDtBQUNKLGFBZEQ7QUFlSDs7OzRCQWtCWTtBQUNULG1CQUFPLEtBQUtmLE9BQVo7QUFDSCxTOzBCQUVVTyxDLEVBQUc7QUFDVixpQkFBS1AsT0FBTCxHQUFlTyxDQUFmO0FBQ0g7Ozs0QkFFYTtBQUNWLG1CQUFPLEtBQUtOLFFBQVo7QUFDSCxTOzBCQUVXTSxDLEVBQUc7QUFDWCxpQkFBS04sUUFBTCxHQUFnQk0sQ0FBaEI7QUFDSDs7Ozs7O0FBeEZDYixNLENBRUtlLE8sR0FBVSxJO2tCQXlGTmYsTSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBpbmNJZCA9IDE7XG5cbmNvbnN0IG5vb3AgPSBmdW5jdGlvbiAoKSB7IH07XG5cbmNsYXNzIEdJbWFnZSB7XG5cbiAgICBzdGF0aWMgR0JyaWRnZSA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faWQgPSBpbmNJZCsrO1xuICAgICAgICB0aGlzLl93aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX3NyYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb25sb2FkID0gbm9vcDtcbiAgICAgICAgdGhpcy5fb25lcnJvciA9IG5vb3A7XG4gICAgICAgIHRoaXMuY29tcGxldGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgICB9XG4gICAgc2V0IHdpZHRoKHYpIHtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB2O1xuICAgIH1cblxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgfVxuXG4gICAgc2V0IGhlaWdodCh2KSB7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IHY7XG4gICAgfVxuXG4gICAgZ2V0IHNyYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NyYztcbiAgICB9XG5cbiAgICBzZXQgc3JjKHYpIHtcblxuICAgICAgICBpZiAodi5zdGFydHNXaXRoKCcvLycpKSB7XG4gICAgICAgICAgICB2ID0gJ2h0dHA6JyArIHY7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zcmMgPSB2O1xuXG4gICAgICAgIEdJbWFnZS5HQnJpZGdlLnBlcmxvYWRJbWFnZShbdGhpcy5fc3JjLCB0aGlzLl9pZF0sIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHZhciBldnQgPSB7IHR5cGU6ICdlcnJvcicsIHRhcmdldDogdGhpcyB9O1xuICAgICAgICAgICAgICAgIHRoaXMub25lcnJvcihldnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdHlwZW9mIGRhdGEud2lkdGggPT09ICdudW1iZXInID8gZGF0YS53aWR0aCA6IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0eXBlb2YgZGF0YS5oZWlnaHQgPT09ICdudW1iZXInID8gZGF0YS5oZWlnaHQgOiAwO1xuICAgICAgICAgICAgICAgIHZhciBldnQgPSB7IHR5cGU6ICdsb2FkJywgdGFyZ2V0OiB0aGlzIH07XG4gICAgICAgICAgICAgICAgdGhpcy5vbmxvYWQoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2xvYWQnKSB7XG4gICAgICAgICAgICB0aGlzLm9ubG9hZCA9IGxpc3RlbmVyO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIHRoaXMub25lcnJvciA9IGxpc3RlbmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2xvYWQnKSB7XG4gICAgICAgICAgICB0aGlzLm9ubG9hZCA9IG5vb3A7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdGhpcy5vbmVycm9yID0gbm9vcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvbmxvYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbmxvYWQ7XG4gICAgfVxuXG4gICAgc2V0IG9ubG9hZCh2KSB7XG4gICAgICAgIHRoaXMuX29ubG9hZCA9IHY7XG4gICAgfVxuXG4gICAgZ2V0IG9uZXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbmVycm9yO1xuICAgIH1cblxuICAgIHNldCBvbmVycm9yKHYpIHtcbiAgICAgICAgdGhpcy5fb25lcnJvciA9IHY7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHSW1hZ2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL3NyYy9lbnYvaW1hZ2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _GLmethod = __webpack_require__(3);\n\nvar _GLmethod2 = _interopRequireDefault(_GLmethod);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isWeex = typeof WXEnvironment !== 'undefined';\nvar isWeexIOS = isWeex && /ios/i.test(WXEnvironment.platform);\nvar isWeexAndroid = isWeex && !isWeexIOS;\n\nvar GCanvasModule = typeof weex !== 'undefined' && weex.requireModule ? weex.requireModule('gcanvas') : typeof __weex_require__ !== 'undefined' ? __weex_require__('@weex-module/gcanvas') : {};\n\nvar isDebugging = false;\n\nvar isComboDisabled = false;\n\nvar logCommand = function () {\n    var methodQuery = [];\n    Object.keys(_GLmethod2.default).forEach(function (key) {\n        methodQuery[_GLmethod2.default[key]] = key;\n    });\n    var queryMethod = function queryMethod(id) {\n        return methodQuery[parseInt(id)] || 'NotFoundMethod';\n    };\n    var logCommand = function logCommand(id, cmds) {\n        var mId = cmds.split(',')[0];\n        var mName = queryMethod(mId);\n        console.log('=== callNative - componentId:' + id + '; method: ' + mName + '; cmds: ' + cmds);\n    };\n    return logCommand;\n}();\n\nfunction joinArray(arr, sep) {\n    var res = '';\n    for (var i = 0; i < arr.length; i++) {\n        if (i !== 0) {\n            res += sep;\n        }\n        res += arr[i];\n    }\n    return res;\n}\n\nvar commandsCache = {};\n\nvar GBridge = {\n\n    callEnable: function callEnable(ref, configArray) {\n\n        commandsCache[ref] = [];\n\n        return GCanvasModule.enable({\n            componentId: ref,\n            config: configArray\n        });\n    },\n\n    callEnableDebug: function callEnableDebug() {\n        isDebugging = true;\n    },\n\n    callEnableDisableCombo: function callEnableDisableCombo() {\n        isComboDisabled = true;\n    },\n\n    callSetContextType: function callSetContextType(componentId, context_type) {\n        GCanvasModule.setContextType(context_type, componentId);\n    },\n\n    callReset: function callReset(id) {\n        GCanvasModule.resetComponent && canvasModule.resetComponent(componentId);\n    },\n\n    render: isWeexIOS ? function (componentId) {\n        return GCanvasModule.extendCallNative({\n            contextId: componentId,\n            type: 0x60000001\n        });\n    } : function (componentId) {\n        return callGCanvasLinkNative(componentId, 0x60000001, 'render');\n    },\n\n    render2d: isWeexIOS ? function (componentId, commands) {\n\n        if (isDebugging) {\n            console.log('>>> >>> render2d ===');\n            console.log('>>> commands: ' + commands);\n        }\n\n        GCanvasModule.render(commands, componentId);\n    } : function (componentId, commands) {\n\n        if (isDebugging) {\n            console.log('>>> >>> render2d ===');\n            console.log('>>> commands: ' + commands);\n        }\n\n        callGCanvasLinkNative(componentId, 0x20000001, commands);\n    },\n\n    callExtendCallNative: isWeexIOS ? function (componentId, cmdArgs) {\n\n        throw 'should not be here anymore ' + cmdArgs;\n    } : function (componentId, cmdArgs) {\n\n        throw 'should not be here anymore ' + cmdArgs;\n    },\n\n    flushNative: isWeexIOS ? function (componentId) {\n\n        var cmdArgs = joinArray(commandsCache[componentId], ';');\n        commandsCache[componentId] = [];\n\n        if (isDebugging) {\n            console.log('>>> >>> flush native ===');\n            console.log('>>> commands: ' + cmdArgs);\n        }\n\n        var result = GCanvasModule.extendCallNative({\n            \"contextId\": componentId,\n            \"type\": 0x60000000,\n            \"args\": cmdArgs\n        });\n\n        var res = result && result.result;\n\n        if (isDebugging) {\n            console.log('>>> result: ' + res);\n        }\n\n        return res;\n    } : function (componentId) {\n\n        var cmdArgs = joinArray(commandsCache[componentId], ';');\n        commandsCache[componentId] = [];\n\n        if (isDebugging) {\n            console.log('>>> >>> flush native ===');\n            console.log('>>> commands: ' + cmdArgs);\n        }\n\n        var result = callGCanvasLinkNative(componentId, 0x60000000, cmdArgs);\n\n        if (isDebugging) {\n            console.log('>>> result: ' + result);\n        }\n\n        return result;\n    },\n\n    callNative: function callNative(componentId, cmdArgs, cache) {\n\n        if (isDebugging) {\n            logCommand(componentId, cmdArgs);\n        }\n\n        commandsCache[componentId].push(cmdArgs);\n\n        if (!cache || isComboDisabled) {\n            return GBridge.flushNative(componentId);\n        } else {\n            return undefined;\n        }\n    },\n\n    texImage2D: function texImage2D(componentId) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n        }\n\n        if (isWeexIOS) {\n            if (args.length === 6) {\n                var target = args[0],\n                    level = args[1],\n                    internalformat = args[2],\n                    format = args[3],\n                    type = args[4],\n                    image = args[5];\n\n                GBridge.callNative(componentId, _GLmethod2.default.texImage2D + ',' + 6 + ',' + target + ',' + level + ',' + internalformat + ',' + format + ',' + type + ',' + image.src);\n            } else if (args.length === 9) {\n                var _target = args[0],\n                    _level = args[1],\n                    _internalformat = args[2],\n                    width = args[3],\n                    height = args[4],\n                    border = args[5],\n                    _format = args[6],\n                    _type = args[7],\n                    _image = args[8];\n\n                GBridge.callNative(componentId, _GLmethod2.default.texImage2D + ',' + 9 + ',' + _target + ',' + _level + ',' + _internalformat + ',' + width + ',' + height + ',' + border + ',' + +_format + ',' + _type + ',' + (_image ? _image.src : 0));\n            }\n        } else if (isWeexAndroid) {\n            if (args.length === 6) {\n                var _target2 = args[0],\n                    _level2 = args[1],\n                    _internalformat2 = args[2],\n                    _format2 = args[3],\n                    _type2 = args[4],\n                    _image2 = args[5];\n\n                GCanvasModule.texImage2D(componentId, _target2, _level2, _internalformat2, _format2, _type2, _image2.src);\n            } else if (args.length === 9) {\n                var _target3 = args[0],\n                    _level3 = args[1],\n                    _internalformat3 = args[2],\n                    _width = args[3],\n                    _height = args[4],\n                    _border = args[5],\n                    _format3 = args[6],\n                    _type3 = args[7],\n                    _image3 = args[8];\n\n                GCanvasModule.texImage2D(componentId, _target3, _level3, _internalformat3, _width, _height, _border, _format3, _type3, _image3 ? _image3.src : 0);\n            }\n        }\n    },\n    texSubImage2D: function texSubImage2D(componentId, target, level, xoffset, yoffset, format, type, image) {\n        if (isWeexIOS) {\n            if (arguments.length === 8) {\n                GBridge.callNative(componentId, _GLmethod2.default.texSubImage2D + ',' + 6 + ',' + target + ',' + level + ',' + xoffset + ',' + yoffset, +',' + format + ',' + type + ',' + image.src);\n            }\n        } else if (isWeexAndroid) {\n            GCanvasModule.texSubImage2D(componentId, target, level, xoffset, yoffset, format, type, image.src);\n        }\n    },\n    bindImageTexture: function bindImageTexture(componentId, src, imageId) {\n        GCanvasModule.bindImageTexture([src, imageId], componentId);\n    },\n    perloadImage: function perloadImage(_ref, callback) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            url = _ref2[0],\n            id = _ref2[1];\n\n        GCanvasModule.preLoadImage([url, id], function (image) {\n            image.url = url;\n            image.id = id;\n            callback(image);\n        });\n    }\n};\n\nexports.default = GBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar isReactNativeIOS = function isReactNativeIOS() {\n    GBridge.Platform.OS === 'ios';\n};\n\nvar isReactNativeAndroid = function isReactNativeAndroid() {\n    GBridge.Platform.OS === 'android';\n};\n\nvar isDebugging = false;\n\nvar isComboDisabled = false;\n\nvar commandsCache = {};\n\nvar GBridge = {\n\n    GCanvasModule: null,\n\n    Platform: null,\n\n    callEnable: function callEnable(ref, configArray) {\n\n        commandsCache[ref] = [];\n\n        return GBridge.GCanvasModule.enable({\n            componentId: ref,\n            config: configArray\n        });\n    },\n\n    callEnableDebug: function callEnableDebug() {\n        isDebugging = true;\n    },\n\n    callEnableDisableCombo: function callEnableDisableCombo() {\n        isComboDisabled = true;\n    },\n\n    callSetContextType: function callSetContextType(componentId, context_type) {\n        GBridge.GCanvasModule.setContextType(context_type, componentId);\n    },\n\n    render: function render(componentId) {\n        return GBridge.GCanvasModule.extendCallNative({\n            contextId: componentId,\n            type: 0x60000001\n        });\n    },\n\n    render2d: function render2d(componentId, commands) {\n\n        if (isDebugging) {\n            console.log('>>> >>> render2d ===');\n            console.log('>>> commands: ' + commands);\n        }\n\n        GBridge.GCanvasModule.render(commands, componentId);\n    },\n\n    flushNative: function flushNative(componentId) {},\n\n    callNative: function callNative(componentId, cmdArgs, cache) {},\n\n    texImage2D: function texImage2D(componentId) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n        }\n\n        if (isReactNativeIOS()) {\n            if (args.length === 6) {\n                var target = args[0],\n                    level = args[1],\n                    internalformat = args[2],\n                    format = args[3],\n                    type = args[4],\n                    image = args[5];\n\n                GBridge.GBridge.callNative(componentId, GLmethod.texImage2D + ',' + 6 + ',' + target + ',' + level + ',' + internalformat + ',' + format + ',' + type + ',' + image.src);\n            } else if (args.length === 9) {\n                var _target = args[0],\n                    _level = args[1],\n                    _internalformat = args[2],\n                    width = args[3],\n                    height = args[4],\n                    border = args[5],\n                    _format = args[6],\n                    _type = args[7],\n                    _image = args[8];\n\n                GBridge.GBridge.callNative(componentId, GLmethod.texImage2D + ',' + 9 + ',' + _target + ',' + _level + ',' + _internalformat + ',' + width + ',' + height + ',' + border + ',' + +_format + ',' + _type + ',' + (_image ? _image.src : 0));\n            }\n        } else if (isReactNativeAndroid()) {\n            if (args.length === 6) {\n                var _target2 = args[0],\n                    _level2 = args[1],\n                    _internalformat2 = args[2],\n                    _format2 = args[3],\n                    _type2 = args[4],\n                    _image2 = args[5];\n\n                GBridge.GCanvasModule.texImage2D(componentId, _target2, _level2, _internalformat2, _format2, _type2, _image2.src);\n            } else if (args.length === 9) {\n                var _target3 = args[0],\n                    _level3 = args[1],\n                    _internalformat3 = args[2],\n                    _width = args[3],\n                    _height = args[4],\n                    _border = args[5],\n                    _format3 = args[6],\n                    _type3 = args[7],\n                    _image3 = args[8];\n\n                GBridge.GCanvasModule.texImage2D(componentId, _target3, _level3, _internalformat3, _width, _height, _border, _format3, _type3, _image3 ? _image3.src : 0);\n            }\n        }\n    },\n    texSubImage2D: function texSubImage2D(componentId, target, level, xoffset, yoffset, format, type, image) {\n        if (isReactNativeIOS()) {\n            if (arguments.length === 8) {\n                GBridge.callNative(componentId, GLmethod.texSubImage2D + ',' + 6 + ',' + target + ',' + level + ',' + xoffset + ',' + yoffset, +',' + format + ',' + type + ',' + image.src);\n            }\n        } else if (isReactNativeAndroid()) {\n            GCanvasModule.texSubImage2D(componentId, target, level, xoffset, yoffset, format, type, image.src);\n        }\n    },\n    bindImageTexture: function bindImageTexture(componentId, src, imageId) {\n        GBridge.GCanvasModule.bindImageTexture([src, imageId], componentId, function (e) {});\n    },\n    perloadImage: function perloadImage(_ref, callback) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            url = _ref2[0],\n            id = _ref2[1];\n\n        GBridge.GCanvasModule.preLoadImage([url, id], function (image) {\n            image.url = url;\n            image.id = id;\n            callback(image);\n        });\n    }\n};\n\nexports.default = GBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [(_vm.isWeex) ? _c('gcanvas', {\n    ref: \"canvas_holder\",\n    staticStyle: {\n      width: \"750\",\n      height: \"750\",\n      backgroundColor: \"rgba(255,0,0,1)\"\n    }\n  }) : _vm._e(), (!_vm.isWeex) ? _c('canvas', {\n    ref: \"canvas_holder\",\n    staticStyle: {\n      width: \"750px\",\n      height: \"750px\",\n      backgroundColor: \"rgba(255,0,0,1)\"\n    }\n  }) : _vm._e(), _c('text', {\n    staticClass: [\"text\"]\n  }, [_vm._v(\"isWeex:\" + _vm._s(_vm.isWeex))])], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXh0dXJlLnZ1ZT85NzQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2JywgWyhfdm0uaXNXZWV4KSA/IF9jKCdnY2FudmFzJywge1xuICAgIHJlZjogXCJjYW52YXNfaG9sZGVyXCIsXG4gICAgc3RhdGljU3R5bGU6IHtcbiAgICAgIHdpZHRoOiBcIjc1MFwiLFxuICAgICAgaGVpZ2h0OiBcIjc1MFwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjU1LDAsMCwxKVwiXG4gICAgfVxuICB9KSA6IF92bS5fZSgpLCAoIV92bS5pc1dlZXgpID8gX2MoJ2NhbnZhcycsIHtcbiAgICByZWY6IFwiY2FudmFzX2hvbGRlclwiLFxuICAgIHN0YXRpY1N0eWxlOiB7XG4gICAgICB3aWR0aDogXCI3NTBweFwiLFxuICAgICAgaGVpZ2h0OiBcIjc1MHB4XCIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyNTUsMCwwLDEpXCJcbiAgICB9XG4gIH0pIDogX3ZtLl9lKCksIF9jKCd0ZXh0Jywge1xuICAgIHN0YXRpY0NsYXNzOiBbXCJ0ZXh0XCJdXG4gIH0sIFtfdm0uX3YoXCJpc1dlZXg6XCIgKyBfdm0uX3MoX3ZtLmlzV2VleCkpXSldLCAxKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2RpZGkvLnd4L21vZHVsZXMvbm9kZV9tb2R1bGVzL193ZWV4LXZ1ZS1sb2FkZXJAMC43LjBAd2VleC12dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci5qcz9pZD1kYXRhLXYtNGI4ZmZmMDYhL1VzZXJzL2RpZGkvLnd4L21vZHVsZXMvbm9kZV9tb2R1bGVzL193ZWV4LXZ1ZS1sb2FkZXJAMC43LjBAd2VleC12dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi90ZXh0dXJlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ })
/******/ ]);